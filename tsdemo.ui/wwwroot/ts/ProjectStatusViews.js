var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define(["require", "exports", "Models", "StatusViews"], function (require, exports, models, statusViews) {
    var bb = Backbone;
    var ViewSate;
    (function (ViewSate) {
        ViewSate[ViewSate["View"] = 0] = "View";
        ViewSate[ViewSate["Add"] = 1] = "Add";
        ViewSate[ViewSate["Edit"] = 2] = "Edit";
    })(ViewSate || (ViewSate = {}));
    ;
    // view of products with their lines, operation status info
    var ProductStatusViewList = (function (_super) {
        __extends(ProductStatusViewList, _super);
        function ProductStatusViewList() {
            this.collection = models.Collections().Products;
            // collection changes
            models.Collections().Products.on('add', this.render, this);
            models.Collections().Products.on('remove', this.render, this);
            models.Collections().Lines.on('add', this.render, this);
            models.Collections().Lines.on('remove', this.render, this);
            models.Collections().Statuses.on('add', this.render, this);
            models.Collections().Statuses.on('remove', this.render, this);
            models.Collections().Operations.on('add', this.render, this);
            models.Collections().Operations.on('remove', this.render, this);
            models.Collections().Products.on('sync', this.render, this);
            _super.call(this);
        }
        ProductStatusViewList.prototype.render = function () {
            var _this = this;
            this.$el.html('');
            this.collection.each(function (p) {
                var psv = new ProductStatusView(p);
                _this.$el.append(psv.render().el);
            }, this);
            return this;
        };
        return ProductStatusViewList;
    })(bb.View);
    exports.ProductStatusViewList = ProductStatusViewList;
    // list item
    var ProductStatusView = (function (_super) {
        __extends(ProductStatusView, _super);
        function ProductStatusView(model) {
            this.model = model;
            this.template = _.template($('#productStatusView-template').html());
            _super.call(this);
        }
        ProductStatusView.prototype.render = function () {
            var _this = this;
            this.$el.html(this.template({
                id: this.model.id,
                Name: this.model.Name
            }));
            this.model.Lines.forEach(function (line) {
                var ml = models.Collections().Lines.get(line.LineId);
                var pslv = new ProductStatusLineView(_this.model.id, ml);
                _this.$el.find('div[class=operations]').append(pslv.render().$el);
            }, this);
            return this;
        };
        return ProductStatusView;
    })(bb.View);
    exports.ProductStatusView = ProductStatusView;
    // items line
    var ProductStatusLineView = (function (_super) {
        __extends(ProductStatusLineView, _super);
        function ProductStatusLineView(productId, model) {
            this.productId = productId;
            this.model = model;
            this.template = _.template($('#productStatusLineView-template').html());
            _super.call(this);
        }
        ProductStatusLineView.prototype.render = function () {
            var _this = this;
            this.$el.html(this.template(this.model.toJSON()));
            var operations = models.Collections().Operations.filter(function (o) { return o.LineId == _this.model.id; });
            operations.forEach(function (o) {
                var psov = new ProductStatusOperationView(_this.productId, o.LineId);
                psov.model = o;
                _this.$el.find('div[class=operationView]').append(psov.render().$el);
            }, this);
            return this;
        };
        return ProductStatusLineView;
    })(bb.View);
    exports.ProductStatusLineView = ProductStatusLineView;
    // items lines operation
    var ProductStatusOperationView = (function (_super) {
        __extends(ProductStatusOperationView, _super);
        function ProductStatusOperationView(productId, lineId) {
            this.state = ViewSate.View;
            this.productId = productId;
            this.lineId = lineId;
            this.template = _.template($('#productStatusOperationView-template').html());
            _super.call(this);
        }
        ProductStatusOperationView.prototype.render = function () {
            var _this = this;
            var statues = models.Collections().Statuses.filter(function (s) { return s.ProductId == _this.productId && s.OperationId == _this.model.id; });
            var sv = new statusViews.StatusView(this.productId, this.model.id);
            if (statues.length > 0) {
                sv.model = statues[0];
            }
            else {
                sv.model = null;
            }
            this.$el.html(this.template({ "Name": this.model.Name }));
            this.$el.find('div[class=operationState]').append(sv.render().$el);
            return this;
        };
        return ProductStatusOperationView;
    })(bb.View);
    exports.ProductStatusOperationView = ProductStatusOperationView;
});

//# sourceMappingURL=data:application/json;base64,
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define(["require", "exports", "Models", "LineViews"], function (require, exports, models, lineViews) {
    var bb = Backbone;
    var ViewState;
    (function (ViewState) {
        ViewState[ViewState["View"] = 0] = "View";
        ViewState[ViewState["Edit"] = 1] = "Edit";
        ViewState[ViewState["Add"] = 2] = "Add";
        ViewState[ViewState["List"] = 3] = "List";
        ViewState[ViewState["Selected"] = 4] = "Selected";
    })(ViewState || (ViewState = {}));
    ;
    var ProductList = (function (_super) {
        __extends(ProductList, _super);
        function ProductList(productLineElement) {
            this.productLineElement = productLineElement;
            this.state = ViewState.List;
            this.selectedProduct = 0;
            this.listTemplate = _.template($('#productListView-template').html());
            this.listAddTemplate = _.template($('#productListAddView-template').html());
            this.collection = models.Collections().Products;
            // collection changes
            models.Collections().Products.on('add', this.render, this);
            models.Collections().Products.on('remove', this.render, this);
            models.Collections().Products.on('sync', this.render, this);
            // messages
            models.Messaging().bind("selectProduct", this.SelectProduct, this);
            _super.call(this);
        }
        ProductList.prototype.render = function () {
            var _this = this;
            // header
            switch (this.state) {
                case ViewState.List:
                    this.el = this.$el.html(this.listTemplate(null));
                    this.undelegateEvents();
                    this.delegateEvents({ "click .addButton": "stateAdd" });
                    break;
                case ViewState.Add:
                    this.el = this.$el.html(this.listAddTemplate(null));
                    this.undelegateEvents();
                    this.delegateEvents({
                        "click .saveButton": "stateSave",
                        "click .cancelButton": "stateCancel"
                    });
                    break;
            }
            // list
            this.collection.each(function (productModel) {
                // create view
                var pv = new ProductView;
                pv.Selected(productModel.id == _this.selectedProduct);
                pv.model = productModel;
                // append
                _this.$el.append(pv.render().el);
            }, this);
            // product lines
            if (this.selectedProduct != 0) {
                var plv = new ProductLinesView(this.selectedProduct);
                plv.$el = $(this.productLineElement);
                plv.render();
            }
            return this;
        };
        // view state changes
        ProductList.prototype.stateAdd = function () {
            this.state = ViewState.Add;
            this.render();
        };
        ProductList.prototype.stateSave = function () {
            var newLine = new models.Line;
            newLine.Name = this.$el.find('input[name=Name]').val();
            this.collection.create(newLine, { wait: true });
            this.state = ViewState.List;
            this.render();
        };
        ProductList.prototype.stateCancel = function () {
            this.state = ViewState.List;
            this.render();
        };
        // thru messaging
        ProductList.prototype.SelectProduct = function (param) {
            this.selectedProduct = parseInt(param);
            this.render();
        };
        return ProductList;
    })(bb.View);
    exports.ProductList = ProductList;
    var ProductView = (function (_super) {
        __extends(ProductView, _super);
        function ProductView(options) {
            this.state = ViewState.View;
            this.template = _.template($('#productView-template').html());
            this.templateEdit = _.template($('#productEdit-template').html());
            this.templateSelected = _.template($('#productSelected-template').html());
            _super.call(this, options);
        }
        ProductView.prototype.render = function () {
            switch (this.state) {
                case ViewState.View:
                    this.$el.html(this.template(this.model.toJSON()));
                    this.undelegateEvents();
                    this.delegateEvents({
                        "click .editButton": "stateEdit",
                        "click .deleteButton": "stateDelete",
                        "click .productView": "stateSelected"
                    });
                    break;
                case ViewState.Edit:
                    this.$el.html(this.templateEdit(this.model.toJSON()));
                    this.undelegateEvents();
                    this.delegateEvents({
                        "click .saveButton": "stateSave",
                        "click .cancelButton": "stateCancel"
                    });
                    break;
                case ViewState.Selected:
                    this.$el.html(this.templateSelected(this.model.toJSON()));
                    break;
            }
            return this;
        };
        // view state changes
        ProductView.prototype.stateEdit = function () {
            this.state = ViewState.Edit;
            this.render();
        };
        ProductView.prototype.stateDelete = function () {
            this.model.destroy();
        };
        ProductView.prototype.stateSave = function () {
            this.model.Name = this.$el.find('input[name=Name]').val();
            this.model.save();
            this.state = ViewState.View;
            this.render();
        };
        ProductView.prototype.stateCancel = function () {
            this.state = ViewState.View;
            this.render();
        };
        ProductView.prototype.stateSelected = function () {
            models.Messaging().trigger("selectProduct", this.model.id);
        };
        // thru messaging we get selected for reals
        ProductView.prototype.Selected = function (yes) {
            if (yes) {
                this.state = ViewState.Selected;
            }
            else {
                if (this.state == ViewState.Selected) {
                    this.state = ViewState.View;
                }
            }
        };
        return ProductView;
    })(bb.View);
    // products lines list view
    var ProductLinesView = (function (_super) {
        __extends(ProductLinesView, _super);
        function ProductLinesView(productId) {
            this.productId = productId;
            this.state = ViewState.List;
            this.collection = new bb.Collection(models.Collections().Products.get(this.productId).Lines);
            this.listTemplate = _.template($('#productLineListView-template').html());
            this.listAddTemplate = _.template($('#productLineListAddView-template').html());
            _super.call(this);
        }
        ProductLinesView.prototype.render = function () {
            var _this = this;
            // header
            switch (this.state) {
                case ViewState.List:
                    this.el = this.$el.html(this.listTemplate(null));
                    this.undelegateEvents();
                    this.delegateEvents({ "click .addButton": "stateAdd" });
                    break;
                case ViewState.Add:
                    this.el = this.$el.html(this.listAddTemplate(null));
                    var lineListSelect = new lineViews.LinesSelectView("lineId");
                    this.$el.find('select').replaceWith(lineListSelect.render().el);
                    this.undelegateEvents();
                    this.delegateEvents({
                        "click .saveButton": "stateSave",
                        "click .cancelButton": "stateCancel"
                    });
                    break;
            }
            // collection
            this.collection.each(function (pl) {
                var plv = new ProductLineView(_this.productId, pl.get('LineId'));
                _this.$el.append(plv.render().el);
            }, this);
            return this;
        };
        ProductLinesView.prototype.stateSave = function () {
            // todo save
            debugger;
            // fetch data
            var lineId = this.$el.find('select').val();
            // create new product line
            var pl = new models.ProductLine;
            pl.LineId = lineId;
            pl.ProductId = this.productId;
            // add it to product and save
            var product = models.Collections().Products.get(this.productId);
            product.Lines.push(pl);
            product.save();
            // state change to back list
            this.state = ViewState.List;
            this.render();
        };
        ProductLinesView.prototype.stateCancel = function () {
            this.state = ViewState.List;
            this.render();
        };
        ProductLinesView.prototype.stateAdd = function () {
            this.state = ViewState.Add;
            this.render();
        };
        return ProductLinesView;
    })(bb.View);
    exports.ProductLinesView = ProductLinesView;
    // product line item view
    var ProductLineView = (function (_super) {
        __extends(ProductLineView, _super);
        function ProductLineView(productId, lineId) {
            this.productId = productId;
            this.lineId = lineId;
            this.template = _.template($('#productLine-template').html());
            _super.call(this);
        }
        ProductLineView.prototype.render = function () {
            this.undelegateEvents();
            this.delegateEvents({ "click .deleteButton": "stateDelete" });
            var line = models.Collections().Lines.get(this.lineId);
            this.el = this.$el.html(this.template({ "Name": line.Name }));
            return this;
        };
        ProductLineView.prototype.stateDelete = function () {
            var _this = this;
            var product = models.Collections().Products.get(this.productId);
            product.Lines = product.Lines.filter(function (p) { return p.LineId != _this.lineId; });
            product.save();
            this.model.destroy();
        };
        return ProductLineView;
    })(bb.View);
    exports.ProductLineView = ProductLineView;
    // Drop down list of products
    var ProductsSelectView = (function (_super) {
        __extends(ProductsSelectView, _super);
        function ProductsSelectView(selectName) {
            this.collection = models.Collections().Products;
            this.selectName = selectName;
            _super.call(this);
        }
        ProductsSelectView.prototype.render = function () {
            var _this = this;
            // select
            this.el = $('<select name="' + this.selectName + '" class="option">');
            this.collection.each(function (m) {
                // option
                var opt = new ProductsSelectViewOption;
                opt.model = m;
                // append
                _this.$el.append(opt.render().el);
            }, this);
            return this;
        };
        return ProductsSelectView;
    })(bb.View);
    exports.ProductsSelectView = ProductsSelectView;
    var ProductsSelectViewOption = (function (_super) {
        __extends(ProductsSelectViewOption, _super);
        function ProductsSelectViewOption() {
            _super.apply(this, arguments);
        }
        ProductsSelectViewOption.prototype.render = function () {
            this.el = $('<option>');
            this.el.attr('value', this.model.id);
            this.el.text(this.model.Name);
            return this;
        };
        return ProductsSelectViewOption;
    })(bb.View);
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlByb2R1Y3RWaWV3cy50cyJdLCJuYW1lcyI6WyJWaWV3U3RhdGUiLCJQcm9kdWN0TGlzdCIsIlByb2R1Y3RMaXN0LmNvbnN0cnVjdG9yIiwiUHJvZHVjdExpc3QucmVuZGVyIiwiUHJvZHVjdExpc3Quc3RhdGVBZGQiLCJQcm9kdWN0TGlzdC5zdGF0ZVNhdmUiLCJQcm9kdWN0TGlzdC5zdGF0ZUNhbmNlbCIsIlByb2R1Y3RMaXN0LlNlbGVjdFByb2R1Y3QiLCJQcm9kdWN0VmlldyIsIlByb2R1Y3RWaWV3LmNvbnN0cnVjdG9yIiwiUHJvZHVjdFZpZXcucmVuZGVyIiwiUHJvZHVjdFZpZXcuc3RhdGVFZGl0IiwiUHJvZHVjdFZpZXcuc3RhdGVEZWxldGUiLCJQcm9kdWN0Vmlldy5zdGF0ZVNhdmUiLCJQcm9kdWN0Vmlldy5zdGF0ZUNhbmNlbCIsIlByb2R1Y3RWaWV3LnN0YXRlU2VsZWN0ZWQiLCJQcm9kdWN0Vmlldy5TZWxlY3RlZCIsIlByb2R1Y3RMaW5lc1ZpZXciLCJQcm9kdWN0TGluZXNWaWV3LmNvbnN0cnVjdG9yIiwiUHJvZHVjdExpbmVzVmlldy5yZW5kZXIiLCJQcm9kdWN0TGluZXNWaWV3LnN0YXRlU2F2ZSIsIlByb2R1Y3RMaW5lc1ZpZXcuc3RhdGVDYW5jZWwiLCJQcm9kdWN0TGluZXNWaWV3LnN0YXRlQWRkIiwiUHJvZHVjdExpbmVWaWV3IiwiUHJvZHVjdExpbmVWaWV3LmNvbnN0cnVjdG9yIiwiUHJvZHVjdExpbmVWaWV3LnJlbmRlciIsIlByb2R1Y3RMaW5lVmlldy5zdGF0ZURlbGV0ZSIsIlByb2R1Y3RzU2VsZWN0VmlldyIsIlByb2R1Y3RzU2VsZWN0Vmlldy5jb25zdHJ1Y3RvciIsIlByb2R1Y3RzU2VsZWN0Vmlldy5yZW5kZXIiLCJQcm9kdWN0c1NlbGVjdFZpZXdPcHRpb24iLCJQcm9kdWN0c1NlbGVjdFZpZXdPcHRpb24uY29uc3RydWN0b3IiLCJQcm9kdWN0c1NlbGVjdFZpZXdPcHRpb24ucmVuZGVyIl0sIm1hcHBpbmdzIjoi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Z0JBQ2RBLEFBQ0FBLFNBRFNBO2dCQUNUQSxLQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxNQUFNQSxDQUFDQSxHQUFHQSxDQUFDQSxNQUFNQSxFQUFFQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQTtZQUNyQ0EsQ0FBQ0EsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7WUFDVEEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7UUFDaEJBLENBQUNBO1FBQ0xGLHlCQUFDQTtJQUFEQSxDQW5CQSxBQW1CQ0EsRUFuQnVDLEVBQUUsQ0FBQyxJQUFJLEVBbUI5QztJQW5CWSwwQkFBa0IscUJBbUI5QixDQUFBO0lBQ0Q7UUFBdUNHLDRDQUF1QkE7UUFBOURBO1lBQXVDQyw4QkFBdUJBO1FBTzlEQSxDQUFDQTtRQU5HRCx5Q0FBTUEsR0FBTkE7WUFDSUUsSUFBSUEsQ0FBQ0EsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0E7WUFDeEJBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLEVBQUVBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBO1lBQ3JDQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtZQUM5QkEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7UUFDaEJBLENBQUNBO1FBQ0xGLCtCQUFDQTtJQUFEQSxDQVBBLEFBT0NBLEVBUHNDLEVBQUUsQ0FBQyxJQUFJLEVBTzdDIiwiZmlsZSI6IlByb2R1Y3RWaWV3cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBiYiA9IEJhY2tib25lO1xyXG5pbXBvcnQgbW9kZWxzID0gcmVxdWlyZShcIk1vZGVsc1wiKTtcclxuaW1wb3J0IGxpbmVWaWV3cyA9IHJlcXVpcmUoXCJMaW5lVmlld3NcIik7XHJcblxyXG5lbnVtIFZpZXdTdGF0ZSB7IFZpZXcsIEVkaXQsIEFkZCwgTGlzdCwgU2VsZWN0ZWQgfTtcclxuXHJcbmV4cG9ydCBjbGFzcyBQcm9kdWN0TGlzdCBleHRlbmRzIGJiLlZpZXc8bW9kZWxzLlByb2R1Y3Q+IHtcclxuICAgIHByaXZhdGUgcHJvZHVjdExpbmVFbGVtZW50OiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIHN0YXRlOiBWaWV3U3RhdGU7XHJcbiAgICBwcml2YXRlIHNlbGVjdGVkUHJvZHVjdDogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBsaXN0VGVtcGxhdGU6IChkYXRhOiBhbnkpID0+IHN0cmluZztcclxuICAgIHByaXZhdGUgbGlzdEFkZFRlbXBsYXRlOiAoZGF0YTogYW55KSA9PiBzdHJpbmc7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9kdWN0TGluZUVsZW1lbnQ6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMucHJvZHVjdExpbmVFbGVtZW50ID0gcHJvZHVjdExpbmVFbGVtZW50O1xyXG4gICAgICAgIHRoaXMuc3RhdGUgPSBWaWV3U3RhdGUuTGlzdDtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkUHJvZHVjdCA9IDA7XHJcbiAgICAgICAgdGhpcy5saXN0VGVtcGxhdGUgPSBfLnRlbXBsYXRlKCQoJyNwcm9kdWN0TGlzdFZpZXctdGVtcGxhdGUnKS5odG1sKCkpO1xyXG4gICAgICAgIHRoaXMubGlzdEFkZFRlbXBsYXRlID0gXy50ZW1wbGF0ZSgkKCcjcHJvZHVjdExpc3RBZGRWaWV3LXRlbXBsYXRlJykuaHRtbCgpKTtcclxuICAgICAgICB0aGlzLmNvbGxlY3Rpb24gPSBtb2RlbHMuQ29sbGVjdGlvbnMoKS5Qcm9kdWN0cztcclxuICAgICAgICAvLyBjb2xsZWN0aW9uIGNoYW5nZXNcclxuICAgICAgICBtb2RlbHMuQ29sbGVjdGlvbnMoKS5Qcm9kdWN0cy5vbignYWRkJywgdGhpcy5yZW5kZXIsIHRoaXMpO1xyXG4gICAgICAgIG1vZGVscy5Db2xsZWN0aW9ucygpLlByb2R1Y3RzLm9uKCdyZW1vdmUnLCB0aGlzLnJlbmRlciwgdGhpcyk7XHJcbiAgICAgICAgbW9kZWxzLkNvbGxlY3Rpb25zKCkuUHJvZHVjdHMub24oJ3N5bmMnLCB0aGlzLnJlbmRlciwgdGhpcyk7XHJcbiAgICAgICAgLy8gbWVzc2FnZXNcclxuICAgICAgICBtb2RlbHMuTWVzc2FnaW5nKCkuYmluZChcInNlbGVjdFByb2R1Y3RcIiwgdGhpcy5TZWxlY3RQcm9kdWN0LCB0aGlzKTtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgfVxyXG4gICAgcmVuZGVyKCk6IGJiLlZpZXc8bW9kZWxzLlByb2R1Y3Q+IHtcclxuICAgICAgICAvLyBoZWFkZXJcclxuICAgICAgICBzd2l0Y2ggKHRoaXMuc3RhdGUpIHtcclxuICAgICAgICAgICAgY2FzZSBWaWV3U3RhdGUuTGlzdDpcclxuICAgICAgICAgICAgICAgIHRoaXMuZWwgPSB0aGlzLiRlbC5odG1sKHRoaXMubGlzdFRlbXBsYXRlKG51bGwpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudW5kZWxlZ2F0ZUV2ZW50cygpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kZWxlZ2F0ZUV2ZW50cyh7IFwiY2xpY2sgLmFkZEJ1dHRvblwiOiBcInN0YXRlQWRkXCIgfSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBWaWV3U3RhdGUuQWRkOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5lbCA9IHRoaXMuJGVsLmh0bWwodGhpcy5saXN0QWRkVGVtcGxhdGUobnVsbCkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy51bmRlbGVnYXRlRXZlbnRzKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRlbGVnYXRlRXZlbnRzKHtcclxuICAgICAgICAgICAgICAgICAgICBcImNsaWNrIC5zYXZlQnV0dG9uXCI6IFwic3RhdGVTYXZlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJjbGljayAuY2FuY2VsQnV0dG9uXCI6IFwic3RhdGVDYW5jZWxcIlxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gbGlzdFxyXG4gICAgICAgIHRoaXMuY29sbGVjdGlvbi5lYWNoKHByb2R1Y3RNb2RlbCA9PiB7XHJcbiAgICAgICAgICAgIC8vIGNyZWF0ZSB2aWV3XHJcbiAgICAgICAgICAgIHZhciBwdiA9IG5ldyBQcm9kdWN0VmlldztcclxuICAgICAgICAgICAgcHYuU2VsZWN0ZWQocHJvZHVjdE1vZGVsLmlkID09IHRoaXMuc2VsZWN0ZWRQcm9kdWN0KTtcclxuICAgICAgICAgICAgcHYubW9kZWwgPSBwcm9kdWN0TW9kZWw7XHJcbiAgICAgICAgICAgIC8vIGFwcGVuZFxyXG4gICAgICAgICAgICB0aGlzLiRlbC5hcHBlbmQocHYucmVuZGVyKCkuZWwpO1xyXG4gICAgICAgIH0sIHRoaXMpO1xyXG4gICAgICAgIC8vIHByb2R1Y3QgbGluZXNcclxuICAgICAgICBpZiAodGhpcy5zZWxlY3RlZFByb2R1Y3QgIT0gMCkge1xyXG4gICAgICAgICAgICB2YXIgcGx2ID0gbmV3IFByb2R1Y3RMaW5lc1ZpZXcodGhpcy5zZWxlY3RlZFByb2R1Y3QpO1xyXG4gICAgICAgICAgICBwbHYuJGVsID0gJCh0aGlzLnByb2R1Y3RMaW5lRWxlbWVudCk7XHJcbiAgICAgICAgICAgIHBsdi5yZW5kZXIoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICAvLyB2aWV3IHN0YXRlIGNoYW5nZXNcclxuICAgIHByaXZhdGUgc3RhdGVBZGQoKSB7XHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFZpZXdTdGF0ZS5BZGQ7XHJcbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcclxuICAgIH1cclxuICAgIHByaXZhdGUgc3RhdGVTYXZlKCkge1xyXG4gICAgICAgIHZhciBuZXdMaW5lID0gbmV3IG1vZGVscy5MaW5lO1xyXG4gICAgICAgIG5ld0xpbmUuTmFtZSA9IHRoaXMuJGVsLmZpbmQoJ2lucHV0W25hbWU9TmFtZV0nKS52YWwoKTtcclxuICAgICAgICB0aGlzLmNvbGxlY3Rpb24uY3JlYXRlKG5ld0xpbmUsIHsgd2FpdDogdHJ1ZSB9KTtcclxuICAgICAgICB0aGlzLnN0YXRlID0gVmlld1N0YXRlLkxpc3Q7XHJcbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcclxuICAgIH1cclxuICAgIHByaXZhdGUgc3RhdGVDYW5jZWwoKSB7XHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFZpZXdTdGF0ZS5MaXN0O1xyXG4gICAgICAgIHRoaXMucmVuZGVyKCk7XHJcbiAgICB9XHJcbiAgICAvLyB0aHJ1IG1lc3NhZ2luZ1xyXG4gICAgcHVibGljIFNlbGVjdFByb2R1Y3QocGFyYW06IGFueSkge1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRQcm9kdWN0ID0gcGFyc2VJbnQocGFyYW0pO1xyXG4gICAgICAgIHRoaXMucmVuZGVyKCk7XHJcbiAgICB9XHJcbn1cclxuY2xhc3MgUHJvZHVjdFZpZXcgZXh0ZW5kcyBiYi5WaWV3PG1vZGVscy5Qcm9kdWN0PiB7XHJcbiAgICBwcml2YXRlIHN0YXRlOiBWaWV3U3RhdGU7XHJcbiAgICBwcml2YXRlIHRlbXBsYXRlOiAoZGF0YTogYW55KSA9PiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIHRlbXBsYXRlRWRpdDogKGRhdGE6IGFueSkgPT4gc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSB0ZW1wbGF0ZVNlbGVjdGVkOiAoZGF0YTogYW55KSA9PiBzdHJpbmc7XHJcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zPzogYW55KSB7XHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFZpZXdTdGF0ZS5WaWV3O1xyXG4gICAgICAgIHRoaXMudGVtcGxhdGUgPSBfLnRlbXBsYXRlKCQoJyNwcm9kdWN0Vmlldy10ZW1wbGF0ZScpLmh0bWwoKSk7XHJcbiAgICAgICAgdGhpcy50ZW1wbGF0ZUVkaXQgPSBfLnRlbXBsYXRlKCQoJyNwcm9kdWN0RWRpdC10ZW1wbGF0ZScpLmh0bWwoKSk7XHJcbiAgICAgICAgdGhpcy50ZW1wbGF0ZVNlbGVjdGVkID0gXy50ZW1wbGF0ZSgkKCcjcHJvZHVjdFNlbGVjdGVkLXRlbXBsYXRlJykuaHRtbCgpKTtcclxuICAgICAgICBzdXBlcihvcHRpb25zKTtcclxuICAgIH1cclxuICAgIHJlbmRlcigpOiBiYi5WaWV3PG1vZGVscy5Qcm9kdWN0PiB7XHJcbiAgICAgICAgc3dpdGNoICh0aGlzLnN0YXRlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgVmlld1N0YXRlLlZpZXc6XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRlbC5odG1sKHRoaXMudGVtcGxhdGUodGhpcy5tb2RlbC50b0pTT04oKSkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy51bmRlbGVnYXRlRXZlbnRzKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRlbGVnYXRlRXZlbnRzKHtcclxuICAgICAgICAgICAgICAgICAgICBcImNsaWNrIC5lZGl0QnV0dG9uXCI6IFwic3RhdGVFZGl0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJjbGljayAuZGVsZXRlQnV0dG9uXCI6IFwic3RhdGVEZWxldGVcIixcclxuICAgICAgICAgICAgICAgICAgICBcImNsaWNrIC5wcm9kdWN0Vmlld1wiOiBcInN0YXRlU2VsZWN0ZWRcIlxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBWaWV3U3RhdGUuRWRpdDpcclxuICAgICAgICAgICAgICAgIHRoaXMuJGVsLmh0bWwodGhpcy50ZW1wbGF0ZUVkaXQodGhpcy5tb2RlbC50b0pTT04oKSkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy51bmRlbGVnYXRlRXZlbnRzKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRlbGVnYXRlRXZlbnRzKHtcclxuICAgICAgICAgICAgICAgICAgICBcImNsaWNrIC5zYXZlQnV0dG9uXCI6IFwic3RhdGVTYXZlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgXCJjbGljayAuY2FuY2VsQnV0dG9uXCI6IFwic3RhdGVDYW5jZWxcIlxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBWaWV3U3RhdGUuU2VsZWN0ZWQ6XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRlbC5odG1sKHRoaXMudGVtcGxhdGVTZWxlY3RlZCh0aGlzLm1vZGVsLnRvSlNPTigpKSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICAvLyB2aWV3IHN0YXRlIGNoYW5nZXNcclxuICAgIHByaXZhdGUgc3RhdGVFZGl0KCkge1xyXG4gICAgICAgIHRoaXMuc3RhdGUgPSBWaWV3U3RhdGUuRWRpdDtcclxuICAgICAgICB0aGlzLnJlbmRlcigpO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBzdGF0ZURlbGV0ZSgpIHtcclxuICAgICAgICB0aGlzLm1vZGVsLmRlc3Ryb3koKTtcclxuICAgIH1cclxuICAgIHByaXZhdGUgc3RhdGVTYXZlKCkge1xyXG4gICAgICAgIHRoaXMubW9kZWwuTmFtZSA9IHRoaXMuJGVsLmZpbmQoJ2lucHV0W25hbWU9TmFtZV0nKS52YWwoKTtcclxuICAgICAgICB0aGlzLm1vZGVsLnNhdmUoKTtcclxuICAgICAgICB0aGlzLnN0YXRlID0gVmlld1N0YXRlLlZpZXc7XHJcbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcclxuICAgIH1cclxuICAgIHByaXZhdGUgc3RhdGVDYW5jZWwoKSB7XHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFZpZXdTdGF0ZS5WaWV3O1xyXG4gICAgICAgIHRoaXMucmVuZGVyKCk7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIHN0YXRlU2VsZWN0ZWQoKSB7XHJcbiAgICAgICAgbW9kZWxzLk1lc3NhZ2luZygpLnRyaWdnZXIoXCJzZWxlY3RQcm9kdWN0XCIsIHRoaXMubW9kZWwuaWQpO1xyXG4gICAgfVxyXG4gICAgLy8gdGhydSBtZXNzYWdpbmcgd2UgZ2V0IHNlbGVjdGVkIGZvciByZWFsc1xyXG4gICAgcHVibGljIFNlbGVjdGVkKHllczogYm9vbGVhbikge1xyXG4gICAgICAgIGlmICh5ZXMpIHtcclxuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFZpZXdTdGF0ZS5TZWxlY3RlZDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZSA9PSBWaWV3U3RhdGUuU2VsZWN0ZWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBWaWV3U3RhdGUuVmlldztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4vLyBwcm9kdWN0cyBsaW5lcyBsaXN0IHZpZXdcclxuZXhwb3J0IGNsYXNzIFByb2R1Y3RMaW5lc1ZpZXcgZXh0ZW5kcyBiYi5WaWV3PG1vZGVscy5Qcm9kdWN0TGluZT4ge1xyXG4gICAgcHJpdmF0ZSBwcm9kdWN0SWQ6IG51bWJlcjtcclxuICAgIHByaXZhdGUgc3RhdGU6IFZpZXdTdGF0ZTtcclxuICAgIHByaXZhdGUgbGlzdFRlbXBsYXRlOiAoZGF0YTogYW55KSA9PiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIGxpc3RBZGRUZW1wbGF0ZTogKGRhdGE6IGFueSkgPT4gc3RyaW5nO1xyXG4gICAgY29uc3RydWN0b3IocHJvZHVjdElkOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLnByb2R1Y3RJZCA9IHByb2R1Y3RJZDtcclxuICAgICAgICB0aGlzLnN0YXRlID0gVmlld1N0YXRlLkxpc3Q7XHJcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uID0gbmV3IGJiLkNvbGxlY3Rpb248bW9kZWxzLlByb2R1Y3RMaW5lPihcclxuICAgICAgICAgICAgbW9kZWxzLkNvbGxlY3Rpb25zKCkuUHJvZHVjdHMuZ2V0KHRoaXMucHJvZHVjdElkKS5MaW5lcyk7XHJcbiAgICAgICAgdGhpcy5saXN0VGVtcGxhdGUgPSBfLnRlbXBsYXRlKCQoJyNwcm9kdWN0TGluZUxpc3RWaWV3LXRlbXBsYXRlJykuaHRtbCgpKTtcclxuICAgICAgICB0aGlzLmxpc3RBZGRUZW1wbGF0ZSA9IF8udGVtcGxhdGUoJCgnI3Byb2R1Y3RMaW5lTGlzdEFkZFZpZXctdGVtcGxhdGUnKS5odG1sKCkpO1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICB9XHJcbiAgICByZW5kZXIoKTogYmIuVmlldzxtb2RlbHMuUHJvZHVjdExpbmU+IHtcclxuICAgICAgICAvLyBoZWFkZXJcclxuICAgICAgICBzd2l0Y2ggKHRoaXMuc3RhdGUpIHtcclxuICAgICAgICAgICAgY2FzZSBWaWV3U3RhdGUuTGlzdDpcclxuICAgICAgICAgICAgICAgIHRoaXMuZWwgPSB0aGlzLiRlbC5odG1sKHRoaXMubGlzdFRlbXBsYXRlKG51bGwpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudW5kZWxlZ2F0ZUV2ZW50cygpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kZWxlZ2F0ZUV2ZW50cyh7IFwiY2xpY2sgLmFkZEJ1dHRvblwiOiBcInN0YXRlQWRkXCIgfSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBWaWV3U3RhdGUuQWRkOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5lbCA9IHRoaXMuJGVsLmh0bWwodGhpcy5saXN0QWRkVGVtcGxhdGUobnVsbCkpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGxpbmVMaXN0U2VsZWN0ID0gbmV3IGxpbmVWaWV3cy5MaW5lc1NlbGVjdFZpZXcoXCJsaW5lSWRcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRlbC5maW5kKCdzZWxlY3QnKS5yZXBsYWNlV2l0aChsaW5lTGlzdFNlbGVjdC5yZW5kZXIoKS5lbCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVuZGVsZWdhdGVFdmVudHMoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGVsZWdhdGVFdmVudHMoe1xyXG4gICAgICAgICAgICAgICAgICAgIFwiY2xpY2sgLnNhdmVCdXR0b25cIjogXCJzdGF0ZVNhdmVcIixcclxuICAgICAgICAgICAgICAgICAgICBcImNsaWNrIC5jYW5jZWxCdXR0b25cIjogXCJzdGF0ZUNhbmNlbFwiXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBjb2xsZWN0aW9uXHJcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uLmVhY2gocGwgPT4ge1xyXG4gICAgICAgICAgICB2YXIgcGx2ID0gbmV3IFByb2R1Y3RMaW5lVmlldyh0aGlzLnByb2R1Y3RJZCwgcGwuZ2V0KCdMaW5lSWQnKSk7XHJcbiAgICAgICAgICAgIHRoaXMuJGVsLmFwcGVuZChwbHYucmVuZGVyKCkuZWwpO1xyXG4gICAgICAgIH0sIHRoaXMpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBzdGF0ZVNhdmUoKSB7XHJcbiAgICAgICAgLy8gdG9kbyBzYXZlXHJcbiAgICAgICAgZGVidWdnZXI7XHJcbiAgICAgICAgLy8gZmV0Y2ggZGF0YVxyXG4gICAgICAgIHZhciBsaW5lSWQgPSB0aGlzLiRlbC5maW5kKCdzZWxlY3QnKS52YWwoKTtcclxuICAgICAgICAvLyBjcmVhdGUgbmV3IHByb2R1Y3QgbGluZVxyXG4gICAgICAgIHZhciBwbCA9IG5ldyBtb2RlbHMuUHJvZHVjdExpbmU7XHJcbiAgICAgICAgcGwuTGluZUlkID0gbGluZUlkO1xyXG4gICAgICAgIHBsLlByb2R1Y3RJZCA9IHRoaXMucHJvZHVjdElkO1xyXG4gICAgICAgIC8vIGFkZCBpdCB0byBwcm9kdWN0IGFuZCBzYXZlXHJcbiAgICAgICAgdmFyIHByb2R1Y3QgPSBtb2RlbHMuQ29sbGVjdGlvbnMoKS5Qcm9kdWN0cy5nZXQodGhpcy5wcm9kdWN0SWQpO1xyXG4gICAgICAgIHByb2R1Y3QuTGluZXMucHVzaChwbCk7XHJcbiAgICAgICAgcHJvZHVjdC5zYXZlKCk7XHJcbiAgICAgICAgLy8gc3RhdGUgY2hhbmdlIHRvIGJhY2sgbGlzdFxyXG4gICAgICAgIHRoaXMuc3RhdGUgPSBWaWV3U3RhdGUuTGlzdDtcclxuICAgICAgICB0aGlzLnJlbmRlcigpO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBzdGF0ZUNhbmNlbCgpIHtcclxuICAgICAgICB0aGlzLnN0YXRlID0gVmlld1N0YXRlLkxpc3Q7XHJcbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcclxuICAgIH1cclxuICAgIHByaXZhdGUgc3RhdGVBZGQoKSB7XHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFZpZXdTdGF0ZS5BZGQ7XHJcbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcclxuICAgIH1cclxufVxyXG4vLyBwcm9kdWN0IGxpbmUgaXRlbSB2aWV3XHJcbmV4cG9ydCBjbGFzcyBQcm9kdWN0TGluZVZpZXcgZXh0ZW5kcyBiYi5WaWV3PG1vZGVscy5Qcm9kdWN0TGluZT4ge1xyXG4gICAgcHJpdmF0ZSBwcm9kdWN0SWQ6IG51bWJlcjtcclxuICAgIHByaXZhdGUgbGluZUlkOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIHRlbXBsYXRlOiAoZGF0YTogYW55KSA9PiBzdHJpbmc7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9kdWN0SWQ6IG51bWJlciwgbGluZUlkOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLnByb2R1Y3RJZCA9IHByb2R1Y3RJZDtcclxuICAgICAgICB0aGlzLmxpbmVJZCA9IGxpbmVJZDtcclxuICAgICAgICB0aGlzLnRlbXBsYXRlID0gXy50ZW1wbGF0ZSgkKCcjcHJvZHVjdExpbmUtdGVtcGxhdGUnKS5odG1sKCkpO1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICB9XHJcbiAgICByZW5kZXIoKTogYmIuVmlldzxtb2RlbHMuUHJvZHVjdExpbmU+IHtcclxuICAgICAgICB0aGlzLnVuZGVsZWdhdGVFdmVudHMoKTtcclxuICAgICAgICB0aGlzLmRlbGVnYXRlRXZlbnRzKHsgXCJjbGljayAuZGVsZXRlQnV0dG9uXCI6IFwic3RhdGVEZWxldGVcIiB9KTtcclxuICAgICAgICB2YXIgbGluZSA9IG1vZGVscy5Db2xsZWN0aW9ucygpLkxpbmVzLmdldCh0aGlzLmxpbmVJZCk7XHJcbiAgICAgICAgdGhpcy5lbCA9IHRoaXMuJGVsLmh0bWwodGhpcy50ZW1wbGF0ZSh7IFwiTmFtZVwiOiBsaW5lLk5hbWUgfSkpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBzdGF0ZURlbGV0ZSgpIHtcclxuICAgICAgICB2YXIgcHJvZHVjdCA9IG1vZGVscy5Db2xsZWN0aW9ucygpLlByb2R1Y3RzLmdldCh0aGlzLnByb2R1Y3RJZCk7XHJcbiAgICAgICAgcHJvZHVjdC5MaW5lcyA9IHByb2R1Y3QuTGluZXMuZmlsdGVyKChwKSA9PiBwLkxpbmVJZCAhPSB0aGlzLmxpbmVJZCk7XHJcbiAgICAgICAgcHJvZHVjdC5zYXZlKCk7XHJcbiAgICAgICAgdGhpcy5tb2RlbC5kZXN0cm95KCk7XHJcbiAgICB9XHJcbn1cclxuLy8gRHJvcCBkb3duIGxpc3Qgb2YgcHJvZHVjdHNcclxuZXhwb3J0IGNsYXNzIFByb2R1Y3RzU2VsZWN0VmlldyBleHRlbmRzIGJiLlZpZXc8bW9kZWxzLlByb2R1Y3Q+IHtcclxuICAgIHByaXZhdGUgc2VsZWN0TmFtZTogc3RyaW5nO1xyXG4gICAgY29uc3RydWN0b3Ioc2VsZWN0TmFtZTogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uID0gbW9kZWxzLkNvbGxlY3Rpb25zKCkuUHJvZHVjdHM7XHJcbiAgICAgICAgdGhpcy5zZWxlY3ROYW1lID0gc2VsZWN0TmFtZTtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgfVxyXG4gICAgcmVuZGVyKCk6IGJiLlZpZXc8bW9kZWxzLlByb2R1Y3Q+IHtcclxuICAgICAgICAvLyBzZWxlY3RcclxuICAgICAgICB0aGlzLmVsID0gJCgnPHNlbGVjdCBuYW1lPVwiJyArIHRoaXMuc2VsZWN0TmFtZSArICdcIiBjbGFzcz1cIm9wdGlvblwiPicpO1xyXG4gICAgICAgIHRoaXMuY29sbGVjdGlvbi5lYWNoKG0gPT4ge1xyXG4gICAgICAgICAgICAvLyBvcHRpb25cclxuICAgICAgICAgICAgdmFyIG9wdCA9IG5ldyBQcm9kdWN0c1NlbGVjdFZpZXdPcHRpb247XHJcbiAgICAgICAgICAgIG9wdC5tb2RlbCA9IG07XHJcbiAgICAgICAgICAgIC8vIGFwcGVuZFxyXG4gICAgICAgICAgICB0aGlzLiRlbC5hcHBlbmQob3B0LnJlbmRlcigpLmVsKTtcclxuICAgICAgICB9LCB0aGlzKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxufVxyXG5jbGFzcyBQcm9kdWN0c1NlbGVjdFZpZXdPcHRpb24gZXh0ZW5kcyBiYi5WaWV3PG1vZGVscy5Qcm9kdWN0PiB7XHJcbiAgICByZW5kZXIoKTogYmIuVmlldzxtb2RlbHMuUHJvZHVjdD4ge1xyXG4gICAgICAgIHRoaXMuZWwgPSAkKCc8b3B0aW9uPicpO1xyXG4gICAgICAgIHRoaXMuZWwuYXR0cigndmFsdWUnLCB0aGlzLm1vZGVsLmlkKTtcclxuICAgICAgICB0aGlzLmVsLnRleHQodGhpcy5tb2RlbC5OYW1lKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxufVxyXG4gICJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define(["require", "exports", "Models"], function (require, exports, models) {
    var bb = Backbone;
    var ViewState;
    (function (ViewState) {
        ViewState[ViewState["View"] = 0] = "View";
        ViewState[ViewState["Edit"] = 1] = "Edit";
        ViewState[ViewState["Add"] = 2] = "Add";
        ViewState[ViewState["List"] = 3] = "List";
    })(ViewState || (ViewState = {}));
    ;
    var StatusView = (function (_super) {
        __extends(StatusView, _super);
        function StatusView(productId, operationId) {
            this.state = ViewState.View;
            this.productId = productId;
            this.operationId = operationId;
            this.template = _.template($('#statusView-template').html());
            this.templateEdit = _.template($('#statusEditView-template').html());
            this.templateAdd = _.template($('#statusAdd-template').html());
            _super.call(this);
        }
        // render one of the two layouts
        StatusView.prototype.render = function () {
            if (this.model == null) {
                this.state = ViewState.Add;
            }
            switch (this.state) {
                case ViewState.View:
                    this.$el.html(this.template(this.model.toJSON()));
                    this.undelegateEvents();
                    this.delegateEvents({
                        "click .editButton": "stateEdit"
                    });
                    break;
                case ViewState.Add:
                    this.$el.html(this.templateAdd(null));
                    this.undelegateEvents();
                    this.delegateEvents({
                        "click .saveButton": "stateAdd",
                        "click .cancelButton": "stateCancel"
                    });
                    break;
                case ViewState.Edit:
                    this.$el.html(this.templateEdit(this.model.toJSON()));
                    this.undelegateEvents();
                    this.delegateEvents({
                        "click .saveButton": "stateSave",
                        "click .cancelButton": "stateCancel"
                    });
                    break;
            }
            return this;
        };
        // view state changes
        StatusView.prototype.stateEdit = function () {
            this.state = ViewState.Edit;
            this.render();
        };
        StatusView.prototype.stateAdd = function () {
            var s = new models.Status;
            s.ProductId = this.productId;
            s.OperationId = this.operationId;
            s.Complete = this.$el.find('input[type=checkbox]').prop('checked');
            s.Notes = this.$el.find('input[type=text]').val();
            this.model = models.Collections().Statuses.create(s, { wait: true });
            this.state = ViewState.View;
            this.render();
        };
        StatusView.prototype.stateSave = function () {
            this.model.ProductId = this.productId;
            this.model.OperationId = this.operationId;
            this.model.Complete = this.$el.find('input[type=checkbox]').prop('checked');
            this.model.Notes = this.$el.find('input[type=text]').val();
            this.model.save();
            this.state = ViewState.View;
            this.render();
        };
        StatusView.prototype.stateCancel = function () {
            this.state = ViewState.View;
            this.render();
        };
        return StatusView;
    })(bb.View);
    exports.StatusView = StatusView;
});

//# sourceMappingURL=data:application/json;base64,
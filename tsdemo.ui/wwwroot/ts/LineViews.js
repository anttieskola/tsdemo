var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define(["require", "exports", "Models"], function (require, exports, models) {
    var bb = Backbone;
    var ViewState;
    (function (ViewState) {
        ViewState[ViewState["View"] = 0] = "View";
        ViewState[ViewState["Edit"] = 1] = "Edit";
        ViewState[ViewState["Add"] = 2] = "Add";
        ViewState[ViewState["List"] = 3] = "List";
        ViewState[ViewState["Selected"] = 4] = "Selected";
    })(ViewState || (ViewState = {}));
    ;
    var LineList = (function (_super) {
        __extends(LineList, _super);
        function LineList() {
            this.state = ViewState.List;
            this.listTemplate = _.template($('#lineListView-template').html());
            this.listAddTemplate = _.template($('#lineListAddView-template').html());
            this.collection = models.Collections().Lines;
            // collection changes
            models.Collections().Lines.on('add', this.render, this);
            models.Collections().Lines.on('remove', this.render, this);
            models.Collections().Lines.on('sync', this.render, this);
            // messages
            models.Messaging().bind("selectLine", this.SelectLine, this);
            _super.call(this);
        }
        LineList.prototype.render = function () {
            var _this = this;
            // header
            switch (this.state) {
                case ViewState.List:
                    this.el = this.$el.html(this.listTemplate(null));
                    this.undelegateEvents();
                    this.delegateEvents({ "click .addButton": "stateAdd" });
                    break;
                case ViewState.Add:
                    this.el = this.$el.html(this.listAddTemplate(null));
                    this.undelegateEvents();
                    this.delegateEvents({
                        "click .saveButton": "stateSave",
                        "click .cancelButton": "stateCancel"
                    });
                    break;
            }
            // list
            this.collection.each(function (lineModel) {
                var line = new LineView;
                line.Selected(lineModel.id == _this.selectedLine);
                line.model = lineModel;
                // append
                _this.$el.append(line.render().el);
            }, this);
            return this;
        };
        // view state changes
        LineList.prototype.stateAdd = function () {
            this.state = ViewState.Add;
            this.render();
        };
        LineList.prototype.stateSave = function () {
            var newLine = new models.Line;
            newLine.Name = this.$el.find('input[name=Name]').val();
            this.collection.create(newLine, { wait: true });
            this.state = ViewState.List;
            this.render();
        };
        LineList.prototype.stateCancel = function () {
            this.state = ViewState.List;
            this.render();
        };
        // thru messaging
        LineList.prototype.SelectLine = function (param) {
            this.selectedLine = parseInt(param);
            this.render();
        };
        return LineList;
    })(bb.View);
    exports.LineList = LineList;
    var LineView = (function (_super) {
        __extends(LineView, _super);
        function LineView(options) {
            this.state = ViewState.View;
            this.template = _.template($('#lineView-template').html());
            this.templateEdit = _.template($('#lineEdit-template').html());
            this.templateSelected = _.template($('#lineSelected-template').html());
            _super.call(this, options);
        }
        LineView.prototype.render = function () {
            switch (this.state) {
                case ViewState.View:
                    this.$el.html(this.template(this.model.toJSON()));
                    this.undelegateEvents();
                    this.delegateEvents({
                        "click .editButton": "stateEdit",
                        "click .deleteButton": "stateDelete",
                        "click .lineView": "stateSelected"
                    });
                    break;
                case ViewState.Edit:
                    this.$el.html(this.templateEdit(this.model.toJSON()));
                    this.undelegateEvents();
                    this.delegateEvents({
                        "click .saveButton": "stateSave",
                        "click .cancelButton": "stateCancel"
                    });
                    break;
                case ViewState.Selected:
                    this.$el.html(this.templateSelected(this.model.toJSON()));
                    break;
            }
            return this;
        };
        // view state changes
        LineView.prototype.stateEdit = function () {
            this.state = ViewState.Edit;
            this.render();
        };
        LineView.prototype.stateDelete = function () {
            this.model.destroy();
        };
        LineView.prototype.stateSave = function () {
            this.model.Name = this.$el.find('input[name=Name]').val();
            this.model.save();
            this.state = ViewState.View;
            this.render();
        };
        LineView.prototype.stateCancel = function () {
            this.state = ViewState.View;
            this.render();
        };
        LineView.prototype.stateSelected = function () {
            models.Messaging().trigger("selectLine", this.model.id);
        };
        // thru messaging we get selected for reals
        LineView.prototype.Selected = function (yes) {
            if (yes) {
                this.state = ViewState.Selected;
            }
            else {
                if (this.state == ViewState.Selected) {
                    this.state = ViewState.View;
                }
            }
        };
        return LineView;
    })(bb.View);
    // Dropdown list of lines
    var LinesSelectView = (function (_super) {
        __extends(LinesSelectView, _super);
        function LinesSelectView(selectName) {
            this.collection = models.Collections().Lines;
            this.selectName = selectName;
            _super.call(this);
        }
        LinesSelectView.prototype.render = function () {
            var _this = this;
            // select
            this.el = this.$el = $('<select name="' + this.selectName + '" class="option">');
            this.collection.each(function (l) {
                // option
                var lov = new LineOptionView;
                lov.model = l;
                // append
                _this.$el.append(lov.render().el);
            }, this);
            return this;
        };
        return LinesSelectView;
    })(bb.View);
    exports.LinesSelectView = LinesSelectView;
    var LineOptionView = (function (_super) {
        __extends(LineOptionView, _super);
        function LineOptionView() {
            _super.apply(this, arguments);
        }
        LineOptionView.prototype.render = function () {
            this.el = $('<option>');
            this.el.attr('value', this.model.id);
            this.el.text(this.model.Name);
            return this;
        };
        return LineOptionView;
    })(bb.View);
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkxpbmVWaWV3cy50cyJdLCJuYW1lcyI6WyJWaWV3U3RhdGUiLCJMaW5lTGlzdCIsIkxpbmVMaXN0LmNvbnN0cnVjdG9yIiwiTGluZUxpc3QucmVuZGVyIiwiTGluZUxpc3Quc3RhdGVBZGQiLCJMaW5lTGlzdC5zdGF0ZVNhdmUiLCJMaW5lTGlzdC5zdGF0ZUNhbmNlbCIsIkxpbmVMaXN0LlNlbGVjdExpbmUiLCJMaW5lVmlldyIsIkxpbmVWaWV3LmNvbnN0cnVjdG9yIiwiTGluZVZpZXcucmVuZGVyIiwiTGluZVZpZXcuc3RhdGVFZGl0IiwiTGluZVZpZXcuc3RhdGVEZWxldGUiLCJMaW5lVmlldy5zdGF0ZVNhdmUiLCJMaW5lVmlldy5zdGF0ZUNhbmNlbCIsIkxpbmVWaWV3LnN0YXRlU2VsZWN0ZWQiLCJMaW5lVmlldy5TZWxlY3RlZCIsIkxpbmVzU2VsZWN0VmlldyIsIkxpbmVzU2VsZWN0Vmlldy5jb25zdHJ1Y3RvciIsIkxpbmVzU2VsZWN0Vmlldy5yZW5kZXIiLCJMaW5lT3B0aW9uVmlldyIsIkxpbmVPcHRpb25WaWV3LmNvbnN0cnVjdG9yIiwiTGluZU9wdGlvblZpZXcucmVuZGVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0lBQUEsSUFBTyxFQUFFLEdBQUcsUUFBUSxDQUFDO0lBR3JCLElBQUssU0FBNkM7SUFBbEQsV0FBSyxTQUFTO1FBQUdBLHlDQUFJQSxDQUFBQTtRQUFFQSx5Q0FBSUEsQ0FBQUE7UUFBRUEsdUNBQUdBLENBQUFBO1FBQUVBLHlDQUFJQSxDQUFBQTtRQUFFQSxpREFBUUEsQ0FBQUE7SUFBQ0EsQ0FBQ0EsRUFBN0MsU0FBUyxLQUFULFNBQVMsUUFBb0M7SUFBQSxDQUFDO0lBRW5EO1FBQThCQyw0QkFBb0JBO1FBSzlDQTtZQUNJQyxJQUFJQSxDQUFDQSxLQUFLQSxHQUFHQSxTQUFTQSxDQUFDQSxJQUFJQSxDQUFDQTtZQUM1QkEsSUFBSUEsQ0FBQ0EsWUFBWUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsQ0FB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UUFOR0QsK0JBQU1BLEdBQU5BO1lBQ0lFLElBQUlBLENBQUNBLEVBQUVBLEdBQUdBLENBQUNBLENBQUNBLFVBQVVBLENBQUNBLENBQUNBO1lBQ3hCQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxFQUFFQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQTtZQUNyQ0EsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7WUFDOUJBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBO1FBQ2hCQSxDQUFDQTtRQUNMRixxQkFBQ0E7SUFBREEsQ0FQQSxBQU9DQSxFQVA0QixFQUFFLENBQUMsSUFBSSxFQU9uQyIsImZpbGUiOiJMaW5lVmlld3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYmIgPSBCYWNrYm9uZTtcclxuaW1wb3J0IG1vZGVscyA9IHJlcXVpcmUoXCJNb2RlbHNcIik7XHJcblxyXG5lbnVtIFZpZXdTdGF0ZSB7IFZpZXcsIEVkaXQsIEFkZCwgTGlzdCwgU2VsZWN0ZWQgfTtcclxuXHJcbmV4cG9ydCBjbGFzcyBMaW5lTGlzdCBleHRlbmRzIGJiLlZpZXc8bW9kZWxzLkxpbmU+IHtcclxuICAgIHByaXZhdGUgc3RhdGU6IFZpZXdTdGF0ZTtcclxuICAgIHByaXZhdGUgc2VsZWN0ZWRMaW5lOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIGxpc3RUZW1wbGF0ZTogKGRhdGE6IGFueSkgPT4gc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBsaXN0QWRkVGVtcGxhdGU6IChkYXRhOiBhbnkpID0+IHN0cmluZztcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuc3RhdGUgPSBWaWV3U3RhdGUuTGlzdDtcclxuICAgICAgICB0aGlzLmxpc3RUZW1wbGF0ZSA9IF8udGVtcGxhdGUoJCgnI2xpbmVMaXN0Vmlldy10ZW1wbGF0ZScpLmh0bWwoKSk7XHJcbiAgICAgICAgdGhpcy5saXN0QWRkVGVtcGxhdGUgPSBfLnRlbXBsYXRlKCQoJyNsaW5lTGlzdEFkZFZpZXctdGVtcGxhdGUnKS5odG1sKCkpO1xyXG4gICAgICAgIHRoaXMuY29sbGVjdGlvbiA9IG1vZGVscy5Db2xsZWN0aW9ucygpLkxpbmVzO1xyXG4gICAgICAgIC8vIGNvbGxlY3Rpb24gY2hhbmdlc1xyXG4gICAgICAgIG1vZGVscy5Db2xsZWN0aW9ucygpLkxpbmVzLm9uKCdhZGQnLCB0aGlzLnJlbmRlciwgdGhpcyk7XHJcbiAgICAgICAgbW9kZWxzLkNvbGxlY3Rpb25zKCkuTGluZXMub24oJ3JlbW92ZScsIHRoaXMucmVuZGVyLCB0aGlzKTtcclxuICAgICAgICBtb2RlbHMuQ29sbGVjdGlvbnMoKS5MaW5lcy5vbignc3luYycsIHRoaXMucmVuZGVyLCB0aGlzKTtcclxuICAgICAgICAvLyBtZXNzYWdlc1xyXG4gICAgICAgIG1vZGVscy5NZXNzYWdpbmcoKS5iaW5kKFwic2VsZWN0TGluZVwiLCB0aGlzLlNlbGVjdExpbmUsIHRoaXMpO1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICB9XHJcbiAgICByZW5kZXIoKTogYmIuVmlldzxtb2RlbHMuTGluZT4ge1xyXG4gICAgICAgIC8vIGhlYWRlclxyXG4gICAgICAgIHN3aXRjaCAodGhpcy5zdGF0ZSkge1xyXG4gICAgICAgICAgICBjYXNlIFZpZXdTdGF0ZS5MaXN0OlxyXG4gICAgICAgICAgICAgICAgdGhpcy5lbCA9IHRoaXMuJGVsLmh0bWwodGhpcy5saXN0VGVtcGxhdGUobnVsbCkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy51bmRlbGVnYXRlRXZlbnRzKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRlbGVnYXRlRXZlbnRzKHsgXCJjbGljayAuYWRkQnV0dG9uXCI6IFwic3RhdGVBZGRcIiB9KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFZpZXdTdGF0ZS5BZGQ6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVsID0gdGhpcy4kZWwuaHRtbCh0aGlzLmxpc3RBZGRUZW1wbGF0ZShudWxsKSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVuZGVsZWdhdGVFdmVudHMoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGVsZWdhdGVFdmVudHMoe1xyXG4gICAgICAgICAgICAgICAgICAgIFwiY2xpY2sgLnNhdmVCdXR0b25cIjogXCJzdGF0ZVNhdmVcIixcclxuICAgICAgICAgICAgICAgICAgICBcImNsaWNrIC5jYW5jZWxCdXR0b25cIjogXCJzdGF0ZUNhbmNlbFwiXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBsaXN0XHJcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uLmVhY2gobGluZU1vZGVsID0+IHtcclxuICAgICAgICAgICAgdmFyIGxpbmUgPSBuZXcgTGluZVZpZXc7XHJcbiAgICAgICAgICAgIGxpbmUuU2VsZWN0ZWQobGluZU1vZGVsLmlkID09IHRoaXMuc2VsZWN0ZWRMaW5lKTtcclxuICAgICAgICAgICAgbGluZS5tb2RlbCA9IGxpbmVNb2RlbDtcclxuICAgICAgICAgICAgLy8gYXBwZW5kXHJcbiAgICAgICAgICAgIHRoaXMuJGVsLmFwcGVuZChsaW5lLnJlbmRlcigpLmVsKTtcclxuICAgICAgICB9LCB0aGlzKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIC8vIHZpZXcgc3RhdGUgY2hhbmdlc1xyXG4gICAgcHJpdmF0ZSBzdGF0ZUFkZCgpIHtcclxuICAgICAgICB0aGlzLnN0YXRlID0gVmlld1N0YXRlLkFkZDtcclxuICAgICAgICB0aGlzLnJlbmRlcigpO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBzdGF0ZVNhdmUoKSB7XHJcbiAgICAgICAgdmFyIG5ld0xpbmUgPSBuZXcgbW9kZWxzLkxpbmU7XHJcbiAgICAgICAgbmV3TGluZS5OYW1lID0gdGhpcy4kZWwuZmluZCgnaW5wdXRbbmFtZT1OYW1lXScpLnZhbCgpO1xyXG4gICAgICAgIHRoaXMuY29sbGVjdGlvbi5jcmVhdGUobmV3TGluZSwgeyB3YWl0OiB0cnVlIH0pO1xyXG4gICAgICAgIHRoaXMuc3RhdGUgPSBWaWV3U3RhdGUuTGlzdDtcclxuICAgICAgICB0aGlzLnJlbmRlcigpO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBzdGF0ZUNhbmNlbCgpIHtcclxuICAgICAgICB0aGlzLnN0YXRlID0gVmlld1N0YXRlLkxpc3Q7XHJcbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcclxuICAgIH1cclxuICAgIC8vIHRocnUgbWVzc2FnaW5nXHJcbiAgICBwdWJsaWMgU2VsZWN0TGluZShwYXJhbTogYW55KSB7XHJcbiAgICAgICAgdGhpcy5zZWxlY3RlZExpbmUgPSBwYXJzZUludChwYXJhbSk7XHJcbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcclxuICAgIH1cclxufVxyXG5jbGFzcyBMaW5lVmlldyBleHRlbmRzIGJiLlZpZXc8bW9kZWxzLkxpbmU+IHtcclxuICAgIHByaXZhdGUgc3RhdGU6IFZpZXdTdGF0ZTtcclxuICAgIHByaXZhdGUgdGVtcGxhdGU6IChkYXRhOiBhbnkpID0+IHN0cmluZztcclxuICAgIHByaXZhdGUgdGVtcGxhdGVFZGl0OiAoZGF0YTogYW55KSA9PiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIHRlbXBsYXRlU2VsZWN0ZWQ6IChkYXRhOiBhbnkpID0+IHN0cmluZztcclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM/OiBhbnkpIHtcclxuICAgICAgICB0aGlzLnN0YXRlID0gVmlld1N0YXRlLlZpZXc7XHJcbiAgICAgICAgdGhpcy50ZW1wbGF0ZSA9IF8udGVtcGxhdGUoJCgnI2xpbmVWaWV3LXRlbXBsYXRlJykuaHRtbCgpKTtcclxuICAgICAgICB0aGlzLnRlbXBsYXRlRWRpdCA9IF8udGVtcGxhdGUoJCgnI2xpbmVFZGl0LXRlbXBsYXRlJykuaHRtbCgpKTtcclxuICAgICAgICB0aGlzLnRlbXBsYXRlU2VsZWN0ZWQgPSBfLnRlbXBsYXRlKCQoJyNsaW5lU2VsZWN0ZWQtdGVtcGxhdGUnKS5odG1sKCkpO1xyXG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xyXG4gICAgfVxyXG4gICAgcmVuZGVyKCk6IGJiLlZpZXc8bW9kZWxzLkxpbmU+IHtcclxuICAgICAgICBzd2l0Y2ggKHRoaXMuc3RhdGUpIHtcclxuICAgICAgICAgICAgY2FzZSBWaWV3U3RhdGUuVmlldzpcclxuICAgICAgICAgICAgICAgIHRoaXMuJGVsLmh0bWwodGhpcy50ZW1wbGF0ZSh0aGlzLm1vZGVsLnRvSlNPTigpKSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVuZGVsZWdhdGVFdmVudHMoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGVsZWdhdGVFdmVudHMoe1xyXG4gICAgICAgICAgICAgICAgICAgIFwiY2xpY2sgLmVkaXRCdXR0b25cIjogXCJzdGF0ZUVkaXRcIixcclxuICAgICAgICAgICAgICAgICAgICBcImNsaWNrIC5kZWxldGVCdXR0b25cIjogXCJzdGF0ZURlbGV0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiY2xpY2sgLmxpbmVWaWV3XCI6IFwic3RhdGVTZWxlY3RlZFwiXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFZpZXdTdGF0ZS5FZGl0OlxyXG4gICAgICAgICAgICAgICAgdGhpcy4kZWwuaHRtbCh0aGlzLnRlbXBsYXRlRWRpdCh0aGlzLm1vZGVsLnRvSlNPTigpKSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVuZGVsZWdhdGVFdmVudHMoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGVsZWdhdGVFdmVudHMoe1xyXG4gICAgICAgICAgICAgICAgICAgIFwiY2xpY2sgLnNhdmVCdXR0b25cIjogXCJzdGF0ZVNhdmVcIixcclxuICAgICAgICAgICAgICAgICAgICBcImNsaWNrIC5jYW5jZWxCdXR0b25cIjogXCJzdGF0ZUNhbmNlbFwiXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFZpZXdTdGF0ZS5TZWxlY3RlZDpcclxuICAgICAgICAgICAgICAgIHRoaXMuJGVsLmh0bWwodGhpcy50ZW1wbGF0ZVNlbGVjdGVkKHRoaXMubW9kZWwudG9KU09OKCkpKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIC8vIHZpZXcgc3RhdGUgY2hhbmdlc1xyXG4gICAgcHJpdmF0ZSBzdGF0ZUVkaXQoKSB7XHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFZpZXdTdGF0ZS5FZGl0O1xyXG4gICAgICAgIHRoaXMucmVuZGVyKCk7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIHN0YXRlRGVsZXRlKCkge1xyXG4gICAgICAgIHRoaXMubW9kZWwuZGVzdHJveSgpO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBzdGF0ZVNhdmUoKSB7XHJcbiAgICAgICAgdGhpcy5tb2RlbC5OYW1lID0gdGhpcy4kZWwuZmluZCgnaW5wdXRbbmFtZT1OYW1lXScpLnZhbCgpO1xyXG4gICAgICAgIHRoaXMubW9kZWwuc2F2ZSgpO1xyXG4gICAgICAgIHRoaXMuc3RhdGUgPSBWaWV3U3RhdGUuVmlldztcclxuICAgICAgICB0aGlzLnJlbmRlcigpO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBzdGF0ZUNhbmNlbCgpIHtcclxuICAgICAgICB0aGlzLnN0YXRlID0gVmlld1N0YXRlLlZpZXc7XHJcbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcclxuICAgIH1cclxuICAgIHByaXZhdGUgc3RhdGVTZWxlY3RlZCgpIHtcclxuICAgICAgICBtb2RlbHMuTWVzc2FnaW5nKCkudHJpZ2dlcihcInNlbGVjdExpbmVcIiwgdGhpcy5tb2RlbC5pZCk7XHJcbiAgICB9XHJcbiAgICAvLyB0aHJ1IG1lc3NhZ2luZyB3ZSBnZXQgc2VsZWN0ZWQgZm9yIHJlYWxzXHJcbiAgICBwdWJsaWMgU2VsZWN0ZWQoeWVzOiBib29sZWFuKSB7XHJcbiAgICAgICAgaWYgKHllcykge1xyXG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gVmlld1N0YXRlLlNlbGVjdGVkO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXRlID09IFZpZXdTdGF0ZS5TZWxlY3RlZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFZpZXdTdGF0ZS5WaWV3O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbi8vIERyb3Bkb3duIGxpc3Qgb2YgbGluZXNcclxuZXhwb3J0IGNsYXNzIExpbmVzU2VsZWN0VmlldyBleHRlbmRzIGJiLlZpZXc8bW9kZWxzLkxpbmU+IHtcclxuICAgIHByaXZhdGUgc2VsZWN0TmFtZTogc3RyaW5nO1xyXG4gICAgY29uc3RydWN0b3Ioc2VsZWN0TmFtZTogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uID0gbW9kZWxzLkNvbGxlY3Rpb25zKCkuTGluZXM7XHJcbiAgICAgICAgdGhpcy5zZWxlY3ROYW1lID0gc2VsZWN0TmFtZTtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgfVxyXG4gICAgcmVuZGVyKCk6IGJiLlZpZXc8bW9kZWxzLkxpbmU+IHtcclxuICAgICAgICAvLyBzZWxlY3RcclxuICAgICAgICB0aGlzLmVsID0gdGhpcy4kZWwgPSAkKCc8c2VsZWN0IG5hbWU9XCInICsgdGhpcy5zZWxlY3ROYW1lICsgJ1wiIGNsYXNzPVwib3B0aW9uXCI+Jyk7XHJcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uLmVhY2gobCA9PiB7XHJcbiAgICAgICAgICAgIC8vIG9wdGlvblxyXG4gICAgICAgICAgICB2YXIgbG92ID0gbmV3IExpbmVPcHRpb25WaWV3O1xyXG4gICAgICAgICAgICBsb3YubW9kZWwgPSBsO1xyXG4gICAgICAgICAgICAvLyBhcHBlbmRcclxuICAgICAgICAgICAgdGhpcy4kZWwuYXBwZW5kKGxvdi5yZW5kZXIoKS5lbCk7XHJcbiAgICAgICAgfSwgdGhpcyk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbn1cclxuY2xhc3MgTGluZU9wdGlvblZpZXcgZXh0ZW5kcyBiYi5WaWV3PG1vZGVscy5MaW5lPiB7XHJcbiAgICByZW5kZXIoKTogYmIuVmlldzxtb2RlbHMuTGluZT4ge1xyXG4gICAgICAgIHRoaXMuZWwgPSAkKCc8b3B0aW9uPicpO1xyXG4gICAgICAgIHRoaXMuZWwuYXR0cigndmFsdWUnLCB0aGlzLm1vZGVsLmlkKTtcclxuICAgICAgICB0aGlzLmVsLnRleHQodGhpcy5tb2RlbC5OYW1lKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxufSJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
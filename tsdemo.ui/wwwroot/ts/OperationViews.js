var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define(["require", "exports", "Models"], function (require, exports, models) {
    var bb = Backbone;
    var ViewState;
    (function (ViewState) {
        ViewState[ViewState["View"] = 0] = "View";
        ViewState[ViewState["Edit"] = 1] = "Edit";
        ViewState[ViewState["Add"] = 2] = "Add";
        ViewState[ViewState["List"] = 3] = "List";
    })(ViewState || (ViewState = {}));
    ;
    var OperationList = (function (_super) {
        __extends(OperationList, _super);
        function OperationList(lineId) {
            this.state = ViewState.List;
            this.listTemplate = _.template($('#operationListView-template').html());
            this.listAddTemplate = _.template($('#operationListAddView-template').html());
            this.collection = models.Collections().Operations;
            this.lineId = lineId; // this renders only defined lines operations
            // collection changes
            models.Collections().Operations.on('add', this.render, this);
            models.Collections().Operations.on('remove', this.render, this);
            models.Collections().Operations.on('sync', this.render, this);
            _super.call(this);
        }
        OperationList.prototype.render = function () {
            var _this = this;
            // header
            switch (this.state) {
                case ViewState.List:
                    this.el = this.$el.html(this.listTemplate(null));
                    this.undelegateEvents();
                    this.delegateEvents({ "click .addButton": "stateAdd" });
                    break;
                case ViewState.Add:
                    this.el = this.$el.html(this.listAddTemplate(null));
                    this.undelegateEvents();
                    this.delegateEvents({
                        "click .saveButton": "stateSave",
                        "click .cancelButton": "stateCancel"
                    });
                    break;
            }
            // list
            this.collection.each(function (o) {
                // just add defined lines operations
                if (o.LineId == _this.lineId) {
                    // option
                    var opt = new OperationView;
                    opt.model = o;
                    // append
                    _this.$el.append(opt.render().el);
                }
            }, this);
            return this;
        };
        // view state changes
        OperationList.prototype.stateAdd = function () {
            this.state = ViewState.Add;
            this.render();
        };
        OperationList.prototype.stateSave = function () {
            var no = new models.Operation;
            no.Name = this.$el.find('input[name=Name]').val();
            no.LineId = this.lineId;
            this.collection.create(no, { wait: true });
            this.state = ViewState.List;
            this.render();
        };
        OperationList.prototype.stateCancel = function () {
            this.state = ViewState.List;
            this.render();
        };
        return OperationList;
    })(bb.View);
    exports.OperationList = OperationList;
    var OperationView = (function (_super) {
        __extends(OperationView, _super);
        function OperationView(options) {
            this.state = ViewState.View;
            this.template = _.template($('#operationView-template').html());
            this.templateEdit = _.template($('#operationEditView-template').html());
            _super.call(this, options);
        }
        OperationView.prototype.render = function () {
            switch (this.state) {
                case ViewState.View:
                    this.$el.html(this.template(this.model.toJSON()));
                    this.undelegateEvents();
                    this.delegateEvents({
                        "click .editButton": "stateEdit",
                        "click .deleteButton": "stateDelete"
                    });
                    break;
                case ViewState.Edit:
                    this.$el.html(this.templateEdit(this.model.toJSON()));
                    this.undelegateEvents();
                    this.delegateEvents({
                        "click .saveButton": "stateSave",
                        "click .cancelButton": "stateCancel"
                    });
                    break;
            }
            return this;
        };
        // view state changes
        OperationView.prototype.stateEdit = function () {
            this.state = ViewState.Edit;
            this.render();
        };
        OperationView.prototype.stateDelete = function () {
            this.model.destroy();
        };
        OperationView.prototype.stateSave = function () {
            this.model.Name = this.$el.find('input[name=Name]').val();
            this.model.save();
            this.state = ViewState.View;
            this.render();
        };
        OperationView.prototype.stateCancel = function () {
            this.state = ViewState.View;
            this.render();
        };
        return OperationView;
    })(bb.View);
    // Dropdown list of operations for defined line
    var OperationsSelectView = (function (_super) {
        __extends(OperationsSelectView, _super);
        function OperationsSelectView(lineId, selectName) {
            this.collection = models.Collections().Operations;
            this.selectName = selectName;
            this.lineId = lineId;
            _super.call(this);
        }
        OperationsSelectView.prototype.render = function () {
            var _this = this;
            // select
            this.el = $('<select name="' + this.selectName + '" class="option">');
            this.collection.each(function (o) {
                // just add defined lines operations
                if (o.LineId == _this.lineId) {
                    // option
                    var opt = new OperationOptionView;
                    opt.model = o;
                    // append
                    _this.el.append(opt.render().el);
                }
            }, this);
            return this;
        };
        return OperationsSelectView;
    })(bb.View);
    exports.OperationsSelectView = OperationsSelectView;
    var OperationOptionView = (function (_super) {
        __extends(OperationOptionView, _super);
        function OperationOptionView() {
            _super.apply(this, arguments);
        }
        OperationOptionView.prototype.render = function () {
            this.el = $('<option>');
            this.el.attr('value', this.model.id);
            this.el.text(this.model.Name);
            return this;
        };
        return OperationOptionView;
    })(bb.View);
});

//# sourceMappingURL=data:application/json;base64,
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define(["require", "exports", "ProductViews"], function (require, exports, productViews) {
    var bb = Backbone;
    var ViewState;
    (function (ViewState) {
        ViewState[ViewState["View"] = 0] = "View";
        ViewState[ViewState["Edit"] = 1] = "Edit";
        ViewState[ViewState["Add"] = 2] = "Add";
        ViewState[ViewState["List"] = 3] = "List";
    })(ViewState || (ViewState = {}));
    ;
    // collection view
    var StatusList = (function (_super) {
        __extends(StatusList, _super);
        function StatusList(options) {
            this.listTemplate = _.template($('#statusListView-template').html());
            this.listAddTemplate = _.template($('#statusListAddView-template').html());
            this.state = ViewState.List;
            _super.call(this, options);
        }
        StatusList.prototype.render = function () {
            var _this = this;
            // render header
            switch (this.state) {
                case ViewState.List:
                    this.el = this.$el.html(this.listTemplate(null));
                    this.delegateEvents({ "click .addButton": "stateAdd" });
                    break;
                case ViewState.Add:
                    this.el = this.$el.html(this.listAddTemplate(null));
                    var ps = new productViews.ProductsSelectView("ProductId");
                    this.$el.find('select[name=ProductId]').replaceWith(ps.render().el);
                    this.delegateEvents({
                        "click .saveButton": "stateSave",
                        "click .cancelButton": "stateCancel"
                    });
                    break;
            }
            // render list
            this.collection.each(function (s) {
                var slv = new StatusView;
                slv.model = s;
                _this.el.append(slv.render().el);
            }, this);
            return this;
        };
        // view state changes
        StatusList.prototype.stateAdd = function () {
            this.state = ViewState.Add;
            this.render();
        };
        StatusList.prototype.stateSave = function () {
            // todo save
            this.state = ViewState.List;
            this.render();
        };
        StatusList.prototype.stateCancel = function () {
            this.state = ViewState.List;
            this.render();
        };
        return StatusList;
    })(bb.View);
    exports.StatusList = StatusList;
    var StatusView = (function (_super) {
        __extends(StatusView, _super);
        function StatusView(options) {
            this.template = _.template($('#statusView-template').html());
            this.templateEdit = _.template($('#statusEditView-template').html());
            _super.call(this, options);
        }
        // render one of the two layouts
        StatusView.prototype.render = function () {
            switch (this.state) {
                case ViewState.View:
                    this.$el.html(this.template(this.model.toJSON()));
                    this.delegateEvents({
                        "click .editButton": "stateEdit",
                        "click .deleteButton": "stateDelete"
                    });
                    break;
                case ViewState.Edit:
                    this.$el.html(this.templateEdit(this.model.toJSON()));
                    this.delegateEvents({
                        "click .saveButton": "stateSave",
                        "click .cancelButton": "stateCancel"
                    });
                    break;
            }
            return this;
        };
        // view state changes
        StatusView.prototype.stateEdit = function () {
            this.state = ViewState.Edit;
        };
        StatusView.prototype.stateDelete = function () {
            this.model.destroy();
        };
        StatusView.prototype.stateSave = function () {
            // todo save
            this.state = ViewState.View;
        };
        StatusView.prototype.stateCancel = function () {
            this.state = ViewState.View;
        };
        return StatusView;
    })(bb.View);
});

//# sourceMappingURL=data:application/json;base64,
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
define(["require", "exports", "Models"], function (require, exports, models) {
    var bb = Backbone;
    var ViewState;
    (function (ViewState) {
        ViewState[ViewState["View"] = 0] = "View";
        ViewState[ViewState["Edit"] = 1] = "Edit";
        ViewState[ViewState["Add"] = 2] = "Add";
        ViewState[ViewState["List"] = 3] = "List";
        ViewState[ViewState["Selected"] = 4] = "Selected";
    })(ViewState || (ViewState = {}));
    ;
    var ProductList = (function (_super) {
        __extends(ProductList, _super);
        function ProductList() {
            this.state = ViewState.List;
            this.listTemplate = _.template($('#productListView-template').html());
            this.listAddTemplate = _.template($('#productListAddView-template').html());
            this.collection = models.Collections().Products;
            // collection changes
            models.Collections().Products.on('add', this.render, this);
            models.Collections().Products.on('remove', this.render, this);
            models.Collections().Products.on('sync', this.render, this);
            // messages
            models.Messaging().bind("selectProduct", this.SelectProduct, this);
            _super.call(this);
        }
        ProductList.prototype.render = function () {
            var _this = this;
            // header
            switch (this.state) {
                case ViewState.List:
                    this.el = this.$el.html(this.listTemplate(null));
                    this.undelegateEvents();
                    this.delegateEvents({ "click .addButton": "stateAdd" });
                    break;
                case ViewState.Add:
                    this.el = this.$el.html(this.listAddTemplate(null));
                    this.undelegateEvents();
                    this.delegateEvents({
                        "click .saveButton": "stateSave",
                        "click .cancelButton": "stateCancel"
                    });
                    break;
            }
            // list
            this.collection.each(function (productModel) {
                var pv = new ProductView;
                pv.Selected(productModel.id == _this.selectedProduct);
                pv.model = productModel;
                // append
                _this.$el.append(pv.render().el);
            }, this);
            return this;
        };
        // view state changes
        ProductList.prototype.stateAdd = function () {
            this.state = ViewState.Add;
            this.render();
        };
        ProductList.prototype.stateSave = function () {
            var newLine = new models.Line;
            newLine.Name = this.$el.find('input[name=Name]').val();
            this.collection.create(newLine, { wait: true });
            this.state = ViewState.List;
            this.render();
        };
        ProductList.prototype.stateCancel = function () {
            this.state = ViewState.List;
            this.render();
        };
        // thru messaging
        ProductList.prototype.SelectProduct = function (param) {
            this.selectedProduct = parseInt(param);
            this.render();
        };
        return ProductList;
    })(bb.View);
    exports.ProductList = ProductList;
    var ProductView = (function (_super) {
        __extends(ProductView, _super);
        function ProductView(options) {
            this.state = ViewState.View;
            this.template = _.template($('#productView-template').html());
            this.templateEdit = _.template($('#productEdit-template').html());
            this.templateSelected = _.template($('#productSelected-template').html());
            _super.call(this, options);
        }
        ProductView.prototype.render = function () {
            switch (this.state) {
                case ViewState.View:
                    this.$el.html(this.template(this.model.toJSON()));
                    this.undelegateEvents();
                    this.delegateEvents({
                        "click .editButton": "stateEdit",
                        "click .deleteButton": "stateDelete",
                        "click .lineView": "stateSelected"
                    });
                    break;
                case ViewState.Edit:
                    this.$el.html(this.templateEdit(this.model.toJSON()));
                    this.undelegateEvents();
                    this.delegateEvents({
                        "click .saveButton": "stateSave",
                        "click .cancelButton": "stateCancel"
                    });
                    break;
                case ViewState.Selected:
                    this.$el.html(this.templateSelected(this.model.toJSON()));
                    break;
            }
            return this;
        };
        // view state changes
        ProductView.prototype.stateEdit = function () {
            this.state = ViewState.Edit;
            this.render();
        };
        ProductView.prototype.stateDelete = function () {
            this.model.destroy();
        };
        ProductView.prototype.stateSave = function () {
            this.model.Name = this.$el.find('input[name=Name]').val();
            this.model.save();
            this.state = ViewState.View;
            this.render();
        };
        ProductView.prototype.stateCancel = function () {
            this.state = ViewState.View;
            this.render();
        };
        ProductView.prototype.stateSelected = function () {
            models.Messaging().trigger("selectProduct", this.model.id);
        };
        // thru messaging we get selected for reals
        ProductView.prototype.Selected = function (yes) {
            if (yes) {
                this.state = ViewState.Selected;
            }
            else {
                if (this.state == ViewState.Selected) {
                    this.state = ViewState.View;
                }
            }
        };
        return ProductView;
    })(bb.View);
    // Drop down list of products
    var ProductsSelectView = (function (_super) {
        __extends(ProductsSelectView, _super);
        function ProductsSelectView(selectName) {
            this.collection = models.Collections().Products;
            this.selectName = selectName;
            _super.call(this);
        }
        ProductsSelectView.prototype.render = function () {
            var _this = this;
            // select
            this.el = $('<select name="' + this.selectName + '" class="option">');
            this.collection.each(function (m) {
                // option
                var opt = new ProductsSelectViewOption;
                opt.model = m;
                // append
                _this.el.append(opt.render().el);
            }, this);
            return this;
        };
        return ProductsSelectView;
    })(bb.View);
    exports.ProductsSelectView = ProductsSelectView;
    var ProductsSelectViewOption = (function (_super) {
        __extends(ProductsSelectViewOption, _super);
        function ProductsSelectViewOption() {
            _super.apply(this, arguments);
        }
        ProductsSelectViewOption.prototype.render = function () {
            this.el = $('<option>');
            this.el.attr('value', this.model.id);
            this.el.text(this.model.Name);
            return this;
        };
        return ProductsSelectViewOption;
    })(bb.View);
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlByb2R1Y3RWaWV3cy50cyJdLCJuYW1lcyI6WyJWaWV3U3RhdGUiLCJQcm9kdWN0TGlzdCIsIlByb2R1Y3RMaXN0LmNvbnN0cnVjdG9yIiwiUHJvZHVjdExpc3QucmVuZGVyIiwiUHJvZHVjdExpc3Quc3RhdGVBZGQiLCJQcm9kdWN0TGlzdC5zdGF0ZVNhdmUiLCJQcm9kdWN0TGlzdC5zdGF0ZUNhbmNlbCIsIlByb2R1Y3RMaXN0LlNlbGVjdFByb2R1Y3QiLCJQcm9kdWN0VmlldyIsIlByb2R1Y3RWaWV3LmNvbnN0cnVjdG9yIiwiUHJvZHVjdFZpZXcucmVuZGVyIiwiUHJvZHVjdFZpZXcuc3RhdGVFZGl0IiwiUHJvZHVjdFZpZXcuc3RhdGVEZWxldGUiLCJQcm9kdWN0Vmlldy5zdGF0ZVNhdmUiLCJQcm9kdWN0Vmlldy5zdGF0ZUNhbmNlbCIsIlByb2R1Y3RWaWV3LnN0YXRlU2VsZWN0ZWQiLCJQcm9kdWN0Vmlldy5TZWxlY3RlZCIsIlByb2R1Y3RzU2VsZWN0VmlldyIsIlByb2R1Y3RzU2VsZWN0Vmlldy5jb25zdHJ1Y3RvciIsIlByb2R1Y3RzU2VsZWN0Vmlldy5yZW5kZXIiLCJQcm9kdWN0c1NlbGVjdFZpZXdPcHRpb24iLCJQcm9kdWN0c1NlbGVjdFZpZXdPcHRpb24uY29uc3RydWN0b3IiLCJQcm9kdWN0c1NlbGVjdFZpZXdPcHRpb24ucmVuZGVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0lBQUEsSUFBTyxFQUFFLEdBQUcsUUFBUSxDQUFDO0lBR3JCLElBQUssU0FBNkM7SUFBbEQsV0FBSyxTQUFTO1FBQUdBLHlDQUFJQSxDQUFBQTtRQUFFQSx5Q0FBSUEsQ0FBQUE7UUFBRUEsdUNBQUdBLENBQUFBO1FBQUVBLHlDQUFJQSxDQUFBQTtRQUFFQSxpREFBUUEsQ0FBQUE7SUFBQ0EsQ0FBQ0EsRUFBN0MsU0FBUyxLQUFULFNBQVMsUUFBb0M7SUFBQSxDQUFDO0lBRW5EO1FBQWlDQywrQkFBdUJBO1FBS3BEQTtZQUNJQyxJQUFJQSxDQUFDQSxLQUFLQSxHQUFHQSxTQUFTQSxDQUFDQSxJQUFJQSxDQUFDQTtZQUM1QkEsSUFBSUEsQ0FBQ0EsWUFBWUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsMkJBQTJCQSxDQUFDQSxDQUFDQSxJQUFJQSxFQUFFQSxDQUFDQSxDQUFDQTtZQUN0RUEsSUFBSUEsQ0FBQ0EsZUFBZUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsOEJBQThCQSxDQUFDQSxDQUFDQSxJQUFJQSxFQUFFQSxDQUFDQSxDQUFDQTtZQUM1RUEsSUFBSUEsQ0FBQ0EsVUFBVUEsR0FBR0EsTUFBTUEsQ0FBQ0EsV0FBV0EsRUFBRUEsQ0FBQ0EsUUFBUUEsQ0FBQ0E7WUFDaERBLEFBQ0FBLHFCQURxQkE7WUFDckJBLE1BQU1BLENBQUNBLFdBQVdBLEVBQUVBLENBQUNBLFFBQVFBLENBQUNBLEVBQUVBLENBQUNBLEtBQUtBLEVBQUVBLElBQUlBLENBQUNBLE1BQU1BLEVBQUVBLElBQUlBLENBQUNBLENBQUNBO1lBQzNEQSxNQUFNQSxDQUFDQSxXQUFXQSxFQUFFQSxDQUFDQSxRQUFRQSxDQUFDQSxFQUFFQSxDQUFDQSxRQUFRQSxFQUFFQSxJQUFJQSxDQUFDQSxNQUFNQSxFQUFFQSxJQUFJQSxDQUFDQSxDQUFDQTtZQUM5REEsTUFBTUEsQ0FBQ0EsV0FBV0EsRUFBRUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsTUFBTUEsRUFBRUEsSUFBSUEsQ0FBQ0EsTUFBTUEsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7WUFDNURBLEFBQ0FBLFdBRFdBO1lBQ1hBLE1BQU1BLENBQUNBLFNBQVNBLEVBQUVBLENBQUNBLElBQUlBLENBQUNBLGVBQWVBLEVBQUVBLElBQUlBLENBQUNBLGFBQWFBLEVBQUVBLElBQUlBLENBQUNBLENBQUNBO1lBQ25FQSxpQkFBT0EsQ0FBQ0E7UUFDWkEsQ0FBQ0E7UUFDREQsNEJBQU1BLEdBQU5BO1lBQUFFLGlCQTBCQ0E7WUF6QkdBLEFBQ0FBLFNBRFNBO1lBQ1RB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QkFBa0IscUJBbUI5QixDQUFBO0lBQ0Q7UUFBdUNHLDRDQUF1QkE7UUFBOURBO1lBQXVDQyw4QkFBdUJBO1FBTzlEQSxDQUFDQTtRQU5HRCx5Q0FBTUEsR0FBTkE7WUFDSUUsSUFBSUEsQ0FBQ0EsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0E7WUFDeEJBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLEVBQUVBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBO1lBQ3JDQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtZQUM5QkEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7UUFDaEJBLENBQUNBO1FBQ0xGLCtCQUFDQTtJQUFEQSxDQVBBLEFBT0NBLEVBUHNDLEVBQUUsQ0FBQyxJQUFJLEVBTzdDIiwiZmlsZSI6IlByb2R1Y3RWaWV3cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBiYiA9IEJhY2tib25lO1xyXG5pbXBvcnQgbW9kZWxzID0gcmVxdWlyZShcIk1vZGVsc1wiKTtcclxuXHJcbmVudW0gVmlld1N0YXRlIHsgVmlldywgRWRpdCwgQWRkLCBMaXN0LCBTZWxlY3RlZCB9O1xyXG5cclxuZXhwb3J0IGNsYXNzIFByb2R1Y3RMaXN0IGV4dGVuZHMgYmIuVmlldzxtb2RlbHMuUHJvZHVjdD4ge1xyXG4gICAgcHJpdmF0ZSBzdGF0ZTogVmlld1N0YXRlO1xyXG4gICAgcHJpdmF0ZSBzZWxlY3RlZFByb2R1Y3Q6IG51bWJlcjtcclxuICAgIHByaXZhdGUgbGlzdFRlbXBsYXRlOiAoZGF0YTogYW55KSA9PiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIGxpc3RBZGRUZW1wbGF0ZTogKGRhdGE6IGFueSkgPT4gc3RyaW5nO1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFZpZXdTdGF0ZS5MaXN0O1xyXG4gICAgICAgIHRoaXMubGlzdFRlbXBsYXRlID0gXy50ZW1wbGF0ZSgkKCcjcHJvZHVjdExpc3RWaWV3LXRlbXBsYXRlJykuaHRtbCgpKTtcclxuICAgICAgICB0aGlzLmxpc3RBZGRUZW1wbGF0ZSA9IF8udGVtcGxhdGUoJCgnI3Byb2R1Y3RMaXN0QWRkVmlldy10ZW1wbGF0ZScpLmh0bWwoKSk7XHJcbiAgICAgICAgdGhpcy5jb2xsZWN0aW9uID0gbW9kZWxzLkNvbGxlY3Rpb25zKCkuUHJvZHVjdHM7XHJcbiAgICAgICAgLy8gY29sbGVjdGlvbiBjaGFuZ2VzXHJcbiAgICAgICAgbW9kZWxzLkNvbGxlY3Rpb25zKCkuUHJvZHVjdHMub24oJ2FkZCcsIHRoaXMucmVuZGVyLCB0aGlzKTtcclxuICAgICAgICBtb2RlbHMuQ29sbGVjdGlvbnMoKS5Qcm9kdWN0cy5vbigncmVtb3ZlJywgdGhpcy5yZW5kZXIsIHRoaXMpO1xyXG4gICAgICAgIG1vZGVscy5Db2xsZWN0aW9ucygpLlByb2R1Y3RzLm9uKCdzeW5jJywgdGhpcy5yZW5kZXIsIHRoaXMpO1xyXG4gICAgICAgIC8vIG1lc3NhZ2VzXHJcbiAgICAgICAgbW9kZWxzLk1lc3NhZ2luZygpLmJpbmQoXCJzZWxlY3RQcm9kdWN0XCIsIHRoaXMuU2VsZWN0UHJvZHVjdCwgdGhpcyk7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgIH1cclxuICAgIHJlbmRlcigpOiBiYi5WaWV3PG1vZGVscy5Qcm9kdWN0PiB7XHJcbiAgICAgICAgLy8gaGVhZGVyXHJcbiAgICAgICAgc3dpdGNoICh0aGlzLnN0YXRlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgVmlld1N0YXRlLkxpc3Q6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVsID0gdGhpcy4kZWwuaHRtbCh0aGlzLmxpc3RUZW1wbGF0ZShudWxsKSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVuZGVsZWdhdGVFdmVudHMoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGVsZWdhdGVFdmVudHMoeyBcImNsaWNrIC5hZGRCdXR0b25cIjogXCJzdGF0ZUFkZFwiIH0pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgVmlld1N0YXRlLkFkZDpcclxuICAgICAgICAgICAgICAgIHRoaXMuZWwgPSB0aGlzLiRlbC5odG1sKHRoaXMubGlzdEFkZFRlbXBsYXRlKG51bGwpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudW5kZWxlZ2F0ZUV2ZW50cygpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kZWxlZ2F0ZUV2ZW50cyh7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJjbGljayAuc2F2ZUJ1dHRvblwiOiBcInN0YXRlU2F2ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiY2xpY2sgLmNhbmNlbEJ1dHRvblwiOiBcInN0YXRlQ2FuY2VsXCJcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGxpc3RcclxuICAgICAgICB0aGlzLmNvbGxlY3Rpb24uZWFjaChwcm9kdWN0TW9kZWwgPT4ge1xyXG4gICAgICAgICAgICB2YXIgcHYgPSBuZXcgUHJvZHVjdFZpZXc7XHJcbiAgICAgICAgICAgIHB2LlNlbGVjdGVkKHByb2R1Y3RNb2RlbC5pZCA9PSB0aGlzLnNlbGVjdGVkUHJvZHVjdCk7XHJcbiAgICAgICAgICAgIHB2Lm1vZGVsID0gcHJvZHVjdE1vZGVsO1xyXG4gICAgICAgICAgICAvLyBhcHBlbmRcclxuICAgICAgICAgICAgdGhpcy4kZWwuYXBwZW5kKHB2LnJlbmRlcigpLmVsKTtcclxuICAgICAgICB9LCB0aGlzKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIC8vIHZpZXcgc3RhdGUgY2hhbmdlc1xyXG4gICAgcHJpdmF0ZSBzdGF0ZUFkZCgpIHtcclxuICAgICAgICB0aGlzLnN0YXRlID0gVmlld1N0YXRlLkFkZDtcclxuICAgICAgICB0aGlzLnJlbmRlcigpO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBzdGF0ZVNhdmUoKSB7XHJcbiAgICAgICAgdmFyIG5ld0xpbmUgPSBuZXcgbW9kZWxzLkxpbmU7XHJcbiAgICAgICAgbmV3TGluZS5OYW1lID0gdGhpcy4kZWwuZmluZCgnaW5wdXRbbmFtZT1OYW1lXScpLnZhbCgpO1xyXG4gICAgICAgIHRoaXMuY29sbGVjdGlvbi5jcmVhdGUobmV3TGluZSwgeyB3YWl0OiB0cnVlIH0pO1xyXG4gICAgICAgIHRoaXMuc3RhdGUgPSBWaWV3U3RhdGUuTGlzdDtcclxuICAgICAgICB0aGlzLnJlbmRlcigpO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBzdGF0ZUNhbmNlbCgpIHtcclxuICAgICAgICB0aGlzLnN0YXRlID0gVmlld1N0YXRlLkxpc3Q7XHJcbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcclxuICAgIH1cclxuICAgIC8vIHRocnUgbWVzc2FnaW5nXHJcbiAgICBwdWJsaWMgU2VsZWN0UHJvZHVjdChwYXJhbTogYW55KSB7XHJcbiAgICAgICAgdGhpcy5zZWxlY3RlZFByb2R1Y3QgPSBwYXJzZUludChwYXJhbSk7XHJcbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcclxuICAgIH1cclxufVxyXG5jbGFzcyBQcm9kdWN0VmlldyBleHRlbmRzIGJiLlZpZXc8bW9kZWxzLlByb2R1Y3Q+IHtcclxuICAgIHByaXZhdGUgc3RhdGU6IFZpZXdTdGF0ZTtcclxuICAgIHByaXZhdGUgdGVtcGxhdGU6IChkYXRhOiBhbnkpID0+IHN0cmluZztcclxuICAgIHByaXZhdGUgdGVtcGxhdGVFZGl0OiAoZGF0YTogYW55KSA9PiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIHRlbXBsYXRlU2VsZWN0ZWQ6IChkYXRhOiBhbnkpID0+IHN0cmluZztcclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM/OiBhbnkpIHtcclxuICAgICAgICB0aGlzLnN0YXRlID0gVmlld1N0YXRlLlZpZXc7XHJcbiAgICAgICAgdGhpcy50ZW1wbGF0ZSA9IF8udGVtcGxhdGUoJCgnI3Byb2R1Y3RWaWV3LXRlbXBsYXRlJykuaHRtbCgpKTtcclxuICAgICAgICB0aGlzLnRlbXBsYXRlRWRpdCA9IF8udGVtcGxhdGUoJCgnI3Byb2R1Y3RFZGl0LXRlbXBsYXRlJykuaHRtbCgpKTtcclxuICAgICAgICB0aGlzLnRlbXBsYXRlU2VsZWN0ZWQgPSBfLnRlbXBsYXRlKCQoJyNwcm9kdWN0U2VsZWN0ZWQtdGVtcGxhdGUnKS5odG1sKCkpO1xyXG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xyXG4gICAgfVxyXG4gICAgcmVuZGVyKCk6IGJiLlZpZXc8bW9kZWxzLlByb2R1Y3Q+IHtcclxuICAgICAgICBzd2l0Y2ggKHRoaXMuc3RhdGUpIHtcclxuICAgICAgICAgICAgY2FzZSBWaWV3U3RhdGUuVmlldzpcclxuICAgICAgICAgICAgICAgIHRoaXMuJGVsLmh0bWwodGhpcy50ZW1wbGF0ZSh0aGlzLm1vZGVsLnRvSlNPTigpKSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVuZGVsZWdhdGVFdmVudHMoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGVsZWdhdGVFdmVudHMoe1xyXG4gICAgICAgICAgICAgICAgICAgIFwiY2xpY2sgLmVkaXRCdXR0b25cIjogXCJzdGF0ZUVkaXRcIixcclxuICAgICAgICAgICAgICAgICAgICBcImNsaWNrIC5kZWxldGVCdXR0b25cIjogXCJzdGF0ZURlbGV0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiY2xpY2sgLmxpbmVWaWV3XCI6IFwic3RhdGVTZWxlY3RlZFwiXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFZpZXdTdGF0ZS5FZGl0OlxyXG4gICAgICAgICAgICAgICAgdGhpcy4kZWwuaHRtbCh0aGlzLnRlbXBsYXRlRWRpdCh0aGlzLm1vZGVsLnRvSlNPTigpKSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVuZGVsZWdhdGVFdmVudHMoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGVsZWdhdGVFdmVudHMoe1xyXG4gICAgICAgICAgICAgICAgICAgIFwiY2xpY2sgLnNhdmVCdXR0b25cIjogXCJzdGF0ZVNhdmVcIixcclxuICAgICAgICAgICAgICAgICAgICBcImNsaWNrIC5jYW5jZWxCdXR0b25cIjogXCJzdGF0ZUNhbmNlbFwiXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFZpZXdTdGF0ZS5TZWxlY3RlZDpcclxuICAgICAgICAgICAgICAgIHRoaXMuJGVsLmh0bWwodGhpcy50ZW1wbGF0ZVNlbGVjdGVkKHRoaXMubW9kZWwudG9KU09OKCkpKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIC8vIHZpZXcgc3RhdGUgY2hhbmdlc1xyXG4gICAgcHJpdmF0ZSBzdGF0ZUVkaXQoKSB7XHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFZpZXdTdGF0ZS5FZGl0O1xyXG4gICAgICAgIHRoaXMucmVuZGVyKCk7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIHN0YXRlRGVsZXRlKCkge1xyXG4gICAgICAgIHRoaXMubW9kZWwuZGVzdHJveSgpO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBzdGF0ZVNhdmUoKSB7XHJcbiAgICAgICAgdGhpcy5tb2RlbC5OYW1lID0gdGhpcy4kZWwuZmluZCgnaW5wdXRbbmFtZT1OYW1lXScpLnZhbCgpO1xyXG4gICAgICAgIHRoaXMubW9kZWwuc2F2ZSgpO1xyXG4gICAgICAgIHRoaXMuc3RhdGUgPSBWaWV3U3RhdGUuVmlldztcclxuICAgICAgICB0aGlzLnJlbmRlcigpO1xyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBzdGF0ZUNhbmNlbCgpIHtcclxuICAgICAgICB0aGlzLnN0YXRlID0gVmlld1N0YXRlLlZpZXc7XHJcbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcclxuICAgIH1cclxuICAgIHByaXZhdGUgc3RhdGVTZWxlY3RlZCgpIHtcclxuICAgICAgICBtb2RlbHMuTWVzc2FnaW5nKCkudHJpZ2dlcihcInNlbGVjdFByb2R1Y3RcIiwgdGhpcy5tb2RlbC5pZCk7XHJcbiAgICB9XHJcbiAgICAvLyB0aHJ1IG1lc3NhZ2luZyB3ZSBnZXQgc2VsZWN0ZWQgZm9yIHJlYWxzXHJcbiAgICBwdWJsaWMgU2VsZWN0ZWQoeWVzOiBib29sZWFuKSB7XHJcbiAgICAgICAgaWYgKHllcykge1xyXG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gVmlld1N0YXRlLlNlbGVjdGVkO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXRlID09IFZpZXdTdGF0ZS5TZWxlY3RlZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFZpZXdTdGF0ZS5WaWV3O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbi8vIERyb3AgZG93biBsaXN0IG9mIHByb2R1Y3RzXHJcbmV4cG9ydCBjbGFzcyBQcm9kdWN0c1NlbGVjdFZpZXcgZXh0ZW5kcyBiYi5WaWV3PG1vZGVscy5Qcm9kdWN0PiB7XHJcbiAgICBwcml2YXRlIHNlbGVjdE5hbWU6IHN0cmluZztcclxuICAgIGNvbnN0cnVjdG9yKHNlbGVjdE5hbWU6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuY29sbGVjdGlvbiA9IG1vZGVscy5Db2xsZWN0aW9ucygpLlByb2R1Y3RzO1xyXG4gICAgICAgIHRoaXMuc2VsZWN0TmFtZSA9IHNlbGVjdE5hbWU7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgIH1cclxuICAgIHJlbmRlcigpOiBiYi5WaWV3PG1vZGVscy5Qcm9kdWN0PiB7XHJcbiAgICAgICAgLy8gc2VsZWN0XHJcbiAgICAgICAgdGhpcy5lbCA9ICQoJzxzZWxlY3QgbmFtZT1cIicgKyB0aGlzLnNlbGVjdE5hbWUgKyAnXCIgY2xhc3M9XCJvcHRpb25cIj4nKTtcclxuICAgICAgICB0aGlzLmNvbGxlY3Rpb24uZWFjaChtID0+IHtcclxuICAgICAgICAgICAgLy8gb3B0aW9uXHJcbiAgICAgICAgICAgIHZhciBvcHQgPSBuZXcgUHJvZHVjdHNTZWxlY3RWaWV3T3B0aW9uO1xyXG4gICAgICAgICAgICBvcHQubW9kZWwgPSBtO1xyXG4gICAgICAgICAgICAvLyBhcHBlbmRcclxuICAgICAgICAgICAgdGhpcy5lbC5hcHBlbmQob3B0LnJlbmRlcigpLmVsKTtcclxuICAgICAgICB9LCB0aGlzKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxufVxyXG5jbGFzcyBQcm9kdWN0c1NlbGVjdFZpZXdPcHRpb24gZXh0ZW5kcyBiYi5WaWV3PG1vZGVscy5Qcm9kdWN0PiB7XHJcbiAgICByZW5kZXIoKTogYmIuVmlldzxtb2RlbHMuUHJvZHVjdD4ge1xyXG4gICAgICAgIHRoaXMuZWwgPSAkKCc8b3B0aW9uPicpO1xyXG4gICAgICAgIHRoaXMuZWwuYXR0cigndmFsdWUnLCB0aGlzLm1vZGVsLmlkKTtcclxuICAgICAgICB0aGlzLmVsLnRleHQodGhpcy5tb2RlbC5OYW1lKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxufVxyXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
define(["require", "exports", "Models", "ProductViews", "LineViews", "OperationViews"], function (require, exports, models, productViews, lineViews, operationViews) {
    // main application
    var Application = (function () {
        function Application() {
            // views
            this.productList = new productViews.ProductList;
            this.productList.$el = $('#divProducts');
            this.lineList = new lineViews.LineList();
            this.lineList.$el = $('#divLines');
            // messages
            models.Messaging().bind("selectProduct", this.SelectProduct, this);
            models.Messaging().bind("selectLine", this.SelectLine, this);
        }
        Application.prototype.SelectProduct = function (param) {
            var productId = parseInt(param);
            if (productId > 0 && productId != this.selectedProductId) {
            }
        };
        Application.prototype.SelectLine = function (param) {
            var lineId = parseInt(param);
            if (lineId > 0 && lineId != this.selectedLineId) {
                // have to remove old view so events won't be called from it also
                if (this.operationList != null) {
                    this.operationList.remove();
                }
                this.selectedLineId = lineId;
                this.operationList = new operationViews.OperationList(this.selectedLineId);
                // creating div, as remove will remove the element from dom where view is
                var div = $('<div>');
                div.appendTo($('#divOperations'));
                this.operationList.$el = div;
                this.operationList.render();
            }
        };
        return Application;
    })();
    exports.Application = Application;
    // global access to application
    function App() {
        return application;
    }
    exports.App = App;
    // dummy
    function Run() {
        console.log("Application start");
    }
    exports.Run = Run;
    // global application instance
    var application = new Application;
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk1haW4udHMiXSwibmFtZXMiOlsiQXBwbGljYXRpb24iLCJBcHBsaWNhdGlvbi5jb25zdHJ1Y3RvciIsIkFwcGxpY2F0aW9uLlNlbGVjdFByb2R1Y3QiLCJBcHBsaWNhdGlvbi5TZWxlY3RMaW5lIiwiQXBwIiwiUnVuIl0sIm1hcHBpbmdzIjoiO0lBTUEsQUFDQSxtQkFEbUI7O1FBT2ZBO1lBQ0lDLEFBQ0FBLFFBRFFBO1lBQ1JBLElBQUlBLENBQUNBLFdBQVdBLEdBQUdBLElBQUlBLFlBQVlBLENBQUNBLFdBQVdBLENBQUNBO1lBQ2hEQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQSxjQUFjQSxDQUFDQSxDQUFDQTtZQUN6Q0EsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsSUFBSUEsU0FBU0EsQ0FBQ0EsUUFBUUEsRUFBRUEsQ0FBQ0E7WUFDekNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLEdBQUdBLEdBQUdBLENBQUNBLENBQUNBLFdBQVdBLENBQUNBLENBQUNBO1lBRW5DQSxBQUNBQSxXQURXQTtZQUNYQSxNQUFNQSxDQUFDQSxTQUFTQSxFQUFFQSxDQUFDQSxJQUFJQSxDQUFDQSxlQUFlQSxFQUFFQSxJQUFJQSxDQUFDQSxhQUFhQSxFQUFFQSxJQUFJQSxDQUFDQSxDQUFDQTtZQUNuRUEsTUFBTUEsQ0FBQ0EsU0FBU0EsRUFBRUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsWUFBWUEsRUFBRUEsSUFBSUEsQ0FBQ0EsVUFBVUEsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFFakVBLENBQUNBO1FBQ0RELG1DQUFhQSxHQUFiQSxVQUFjQSxLQUFVQTtZQUNwQkUsSUFBSUEsU0FBU0EsR0FBR0EsUUFBUUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7WUFDaENBLEVBQUVBLENBQUNBLENBQUNBLFNBQVNBLEdBQUdBLENBQUNBLElBQUlBLFNBQVNBLElBQUlBLElBQUlBLENBQUNBLGlCQUFpQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFFM0RBLENBQUNBO1FBQ0xBLENBQUNBO1FBQ0RGLGdDQUFVQSxHQUFWQSxVQUFXQSxLQUFVQTtZQUNqQkcsSUFBSUEsTUFBTUEsR0FBR0EsUUFBUUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7WUFDN0JBLEVBQUVBLENBQUNBLENBQUNBLE1BQU1BLEdBQUdBLENBQUNBLElBQUlBLE1BQU1BLElBQUlBLElBQUlBLENBQUNBLGNBQWNBLENBQUNBLENBQUNBLENBQUNBO2dCQUM5Q0EsQUFDQUEsaUVBRGlFQTtnQkFDakVBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLGFBQWFBLElBQUlBLElBQUlBLENBQUNBLENBQUNBLENBQUNBO29CQUM3QkEsSUFBSUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsTUFBTUEsRUFBRUEsQ0FBQ0E7Z0JBQ2hDQSxDQUFDQTtnQkFDREEsSUFBSUEsQ0FBQ0EsY0FBY0EsR0FBR0EsTUFBTUEsQ0FBQ0E7Z0JBQzdCQSxJQUFJQSxDQUFDQSxhQUFhQSxHQUFHQSxJQUFJQSxjQUFjQSxDQUFDQSxhQUFhQSxDQUFDQSxJQUFJQSxDQUFDQSxjQUFjQSxDQUFDQSxDQUFDQTtnQkFDM0VBLEFBQ0FBLHlFQUR5RUE7b0JBQ3JFQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQTtnQkFBQ0EsR0FBR0EsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDeERBLElBQUlBLENBQUNBLGFBQWFBLENBQUNBLEdBQUdBLEdBQUdBLEdBQUdBLENBQUNBO2dCQUM3QkEsSUFBSUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsTUFBTUEsRUFBRUEsQ0FBQ0E7WUFDaENBLENBQUNBO1FBQ0xBLENBQUNBO1FBQ0xILGtCQUFDQTtJQUFEQSxDQXZDQSxBQXVDQ0EsSUFBQTtJQXZDWSxtQkFBVyxjQXVDdkIsQ0FBQTtJQUNELEFBQ0EsK0JBRCtCOztRQUUzQkksTUFBTUEsQ0FBQ0EsV0FBV0EsQ0FBQ0E7SUFDdkJBLENBQUNBO0lBRmUsV0FBRyxNQUVsQixDQUFBO0lBQ0QsQUFDQSxRQURROztRQUVKQyxPQUFPQSxDQUFDQSxHQUFHQSxDQUFDQSxtQkFBbUJBLENBQUNBLENBQUNBO0lBQ3JDQSxDQUFDQTtJQUZlLFdBQUcsTUFFbEIsQ0FBQTtJQUVELEFBQ0EsOEJBRDhCO1FBQzFCLFdBQVcsR0FBRyxJQUFJLFdBQVcsQ0FBQyIsImZpbGUiOiJNYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGJiID0gQmFja2JvbmU7XHJcbmltcG9ydCBtb2RlbHMgPSByZXF1aXJlKFwiTW9kZWxzXCIpO1xyXG5pbXBvcnQgcHJvZHVjdFZpZXdzID0gcmVxdWlyZShcIlByb2R1Y3RWaWV3c1wiKTtcclxuaW1wb3J0IGxpbmVWaWV3cyA9IHJlcXVpcmUoXCJMaW5lVmlld3NcIik7XHJcbmltcG9ydCBvcGVyYXRpb25WaWV3cyA9IHJlcXVpcmUoXCJPcGVyYXRpb25WaWV3c1wiKTtcclxuXHJcbi8vIG1haW4gYXBwbGljYXRpb25cclxuZXhwb3J0IGNsYXNzIEFwcGxpY2F0aW9uIHtcclxuICAgIHByaXZhdGUgc2VsZWN0ZWRMaW5lSWQ6IG51bWJlcjtcclxuICAgIHByaXZhdGUgc2VsZWN0ZWRQcm9kdWN0SWQ6IG51bWJlcjtcclxuICAgIHByaXZhdGUgcHJvZHVjdExpc3Q6IHByb2R1Y3RWaWV3cy5Qcm9kdWN0TGlzdDtcclxuICAgIHByaXZhdGUgbGluZUxpc3Q6IGxpbmVWaWV3cy5MaW5lTGlzdDtcclxuICAgIHByaXZhdGUgb3BlcmF0aW9uTGlzdDogb3BlcmF0aW9uVmlld3MuT3BlcmF0aW9uTGlzdDtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIC8vIHZpZXdzXHJcbiAgICAgICAgdGhpcy5wcm9kdWN0TGlzdCA9IG5ldyBwcm9kdWN0Vmlld3MuUHJvZHVjdExpc3Q7XHJcbiAgICAgICAgdGhpcy5wcm9kdWN0TGlzdC4kZWwgPSAkKCcjZGl2UHJvZHVjdHMnKTtcclxuICAgICAgICB0aGlzLmxpbmVMaXN0ID0gbmV3IGxpbmVWaWV3cy5MaW5lTGlzdCgpO1xyXG4gICAgICAgIHRoaXMubGluZUxpc3QuJGVsID0gJCgnI2RpdkxpbmVzJyk7XHJcblxyXG4gICAgICAgIC8vIG1lc3NhZ2VzXHJcbiAgICAgICAgbW9kZWxzLk1lc3NhZ2luZygpLmJpbmQoXCJzZWxlY3RQcm9kdWN0XCIsIHRoaXMuU2VsZWN0UHJvZHVjdCwgdGhpcyk7XHJcbiAgICAgICAgbW9kZWxzLk1lc3NhZ2luZygpLmJpbmQoXCJzZWxlY3RMaW5lXCIsIHRoaXMuU2VsZWN0TGluZSwgdGhpcyk7XHJcblxyXG4gICAgfVxyXG4gICAgU2VsZWN0UHJvZHVjdChwYXJhbTogYW55KSB7XHJcbiAgICAgICAgdmFyIHByb2R1Y3RJZCA9IHBhcnNlSW50KHBhcmFtKTtcclxuICAgICAgICBpZiAocHJvZHVjdElkID4gMCAmJiBwcm9kdWN0SWQgIT0gdGhpcy5zZWxlY3RlZFByb2R1Y3RJZCkge1xyXG4gICAgICAgICAgICAvLyBUT0RPLCBuZWVkIHByb2R1Y3RsaW5lIHZpZXcgZmlyc3RcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBTZWxlY3RMaW5lKHBhcmFtOiBhbnkpIHtcclxuICAgICAgICB2YXIgbGluZUlkID0gcGFyc2VJbnQocGFyYW0pO1xyXG4gICAgICAgIGlmIChsaW5lSWQgPiAwICYmIGxpbmVJZCAhPSB0aGlzLnNlbGVjdGVkTGluZUlkKSB7XHJcbiAgICAgICAgICAgIC8vIGhhdmUgdG8gcmVtb3ZlIG9sZCB2aWV3IHNvIGV2ZW50cyB3b24ndCBiZSBjYWxsZWQgZnJvbSBpdCBhbHNvXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wZXJhdGlvbkxpc3QgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vcGVyYXRpb25MaXN0LnJlbW92ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRMaW5lSWQgPSBsaW5lSWQ7XHJcbiAgICAgICAgICAgIHRoaXMub3BlcmF0aW9uTGlzdCA9IG5ldyBvcGVyYXRpb25WaWV3cy5PcGVyYXRpb25MaXN0KHRoaXMuc2VsZWN0ZWRMaW5lSWQpO1xyXG4gICAgICAgICAgICAvLyBjcmVhdGluZyBkaXYsIGFzIHJlbW92ZSB3aWxsIHJlbW92ZSB0aGUgZWxlbWVudCBmcm9tIGRvbSB3aGVyZSB2aWV3IGlzXHJcbiAgICAgICAgICAgIHZhciBkaXYgPSAkKCc8ZGl2PicpOyBkaXYuYXBwZW5kVG8oJCgnI2Rpdk9wZXJhdGlvbnMnKSk7XHJcbiAgICAgICAgICAgIHRoaXMub3BlcmF0aW9uTGlzdC4kZWwgPSBkaXY7XHJcbiAgICAgICAgICAgIHRoaXMub3BlcmF0aW9uTGlzdC5yZW5kZXIoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuLy8gZ2xvYmFsIGFjY2VzcyB0byBhcHBsaWNhdGlvblxyXG5leHBvcnQgZnVuY3Rpb24gQXBwKCk6IEFwcGxpY2F0aW9uIHtcclxuICAgIHJldHVybiBhcHBsaWNhdGlvbjtcclxufVxyXG4vLyBkdW1teVxyXG5leHBvcnQgZnVuY3Rpb24gUnVuKCkge1xyXG4gICAgY29uc29sZS5sb2coXCJBcHBsaWNhdGlvbiBzdGFydFwiKTtcclxufVxyXG5cclxuLy8gZ2xvYmFsIGFwcGxpY2F0aW9uIGluc3RhbmNlXHJcbnZhciBhcHBsaWNhdGlvbiA9IG5ldyBBcHBsaWNhdGlvbjtcclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
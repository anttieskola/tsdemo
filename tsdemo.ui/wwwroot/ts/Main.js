define(["require", "exports", "Models", "ProductViews", "LineViews", "OperationViews", "ProjectStatusViews"], function (require, exports, models, productViews, lineViews, operationViews, productStatusViews) {
    // main application
    var Application = (function () {
        function Application() {
            // views
            this.productStatusList = new productStatusViews.ProductStatusViewList();
            this.productStatusList.$el = $('#divProductStatus');
            this.productList = new productViews.ProductList("#divProductLines");
            this.productList.$el = $('#divProducts');
            this.lineList = new lineViews.LineList();
            this.lineList.$el = $('#divLines');
            this.productStatusList.render();
            this.productList.render();
            this.lineList.render();
            // messages
            models.Messaging().bind("selectProduct", this.selectProduct, this);
            models.Messaging().bind("selectLine", this.selectLine, this);
        }
        Application.prototype.Run = function () {
            // noop
        };
        // message handlers
        Application.prototype.selectProduct = function (param) {
            var productId = parseInt(param);
            if (productId > 0 && productId != this.selectedProductId) {
                this.productList.SelectProduct(productId);
            }
        };
        Application.prototype.selectLine = function (param) {
            var lineId = parseInt(param);
            if (lineId > 0 && lineId != this.selectedLineId) {
                // have to remove old view so events won't be called from it also
                if (this.operationList != null) {
                    this.operationList.remove();
                }
                this.selectedLineId = lineId;
                this.operationList = new operationViews.OperationList(this.selectedLineId);
                // creating div, as remove will remove the element from dom where view is
                var div = $('<div>');
                div.appendTo($('#divOperations'));
                this.operationList.$el = div;
                this.operationList.render();
            }
        };
        return Application;
    })();
    exports.Application = Application;
    function Run() {
        console.log("Application start");
        var application = new Application();
    }
    exports.Run = Run;
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk1haW4udHMiXSwibmFtZXMiOlsiQXBwbGljYXRpb24iLCJBcHBsaWNhdGlvbi5jb25zdHJ1Y3RvciIsIkFwcGxpY2F0aW9uLlJ1biIsIkFwcGxpY2F0aW9uLnNlbGVjdFByb2R1Y3QiLCJBcHBsaWNhdGlvbi5zZWxlY3RMaW5lIiwiUnVuIl0sIm1hcHBpbmdzIjoiO0lBT0EsQUFDQSxtQkFEbUI7O1FBUWZBO1lBQ0lDLEFBQ0FBLFFBRFFBO1lBQ1JBLElBQUlBLENBQUNBLGlCQUFpQkEsR0FBR0EsSUFBSUEsa0JBQWtCQSxDQUFDQSxxQkFBcUJBLEVBQUVBLENBQUNBO1lBQ3hFQSxJQUFJQSxDQUFDQSxpQkFBaUJBLENBQUNBLEdBQUdBLEdBQUdBLENBQUNBLENBQUNBLG1CQUFtQkEsQ0FBQ0EsQ0FBQ0E7WUFDcERBLElBQUlBLENBQUNBLFdBQVdBLEdBQUdBLElBQUlBLFlBQVlBLENBQUNBLFdBQVdBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsQ0FBQ0E7WUFDcEVBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBLEdBQUdBLEdBQUdBLENBQUNBLENBQUNBLGNBQWNBLENBQUNBLENBQUNBO1lBQ3pDQSxJQUFJQSxDQUFDQSxRQUFRQSxHQUFHQSxJQUFJQSxTQUFTQSxDQUFDQSxRQUFRQSxFQUFFQSxDQUFDQTtZQUN6Q0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsR0FBR0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsV0FBV0EsQ0FBQ0EsQ0FBQ0E7WUFDbkNBLElBQUlBLENBQUNBLGlCQUFpQkEsQ0FBQ0EsTUFBTUEsRUFBRUEsQ0FBQ0E7WUFDaENBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBLE1BQU1BLEVBQUVBLENBQUNBO1lBQzFCQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxNQUFNQSxFQUFFQSxDQUFDQTtZQUN2QkEsQUFDQUEsV0FEV0E7WUFDWEEsTUFBTUEsQ0FBQ0EsU0FBU0EsRUFBRUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsZUFBZUEsRUFBRUEsSUFBSUEsQ0FBQ0EsYUFBYUEsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7WUFDbkVBLE1BQU1BLENBQUNBLFNBQVNBLEVBQUVBLENBQUNBLElBQUlBLENBQUNBLFlBQVlBLEVBQUVBLElBQUlBLENBQUNBLFVBQVVBLEVBQUVBLElBQUlBLENBQUNBLENBQUNBO1FBQ2pFQSxDQUFDQTtRQUNNRCx5QkFBR0EsR0FBVkE7WUFDSUUsT0FBT0E7UUFDWEEsQ0FBQ0E7UUFDREYsbUJBQW1CQTtRQUNYQSxtQ0FBYUEsR0FBckJBLFVBQXNCQSxLQUFVQTtZQUM1QkcsSUFBSUEsU0FBU0EsR0FBR0EsUUFBUUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7WUFDaENBLEVBQUVBLENBQUNBLENBQUNBLFNBQVNBLEdBQUdBLENBQUNBLElBQUlBLFNBQVNBLElBQUlBLElBQUlBLENBQUNBLGlCQUFpQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ3ZEQSxJQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxhQUFhQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQTtZQUM5Q0EsQ0FBQ0E7UUFDTEEsQ0FBQ0E7UUFDT0gsZ0NBQVVBLEdBQWxCQSxVQUFtQkEsS0FBVUE7WUFDekJJLElBQUlBLE1BQU1BLEdBQUdBLFFBQVFBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBO1lBQzdCQSxFQUFFQSxDQUFDQSxDQUFDQSxNQUFNQSxHQUFHQSxDQUFDQSxJQUFJQSxNQUFNQSxJQUFJQSxJQUFJQSxDQUFDQSxjQUFjQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDOUNBLEFBQ0FBLGlFQURpRUE7Z0JBQ2pFQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxhQUFhQSxJQUFJQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQTtvQkFDN0JBLElBQUlBLENBQUNBLGFBQWFBLENBQUNBLE1BQU1BLEVBQUVBLENBQUNBO2dCQUNoQ0EsQ0FBQ0E7Z0JBQ0RBLElBQUlBLENBQUNBLGNBQWNBLEdBQUdBLE1BQU1BLENBQUNBO2dCQUM3QkEsSUFBSUEsQ0FBQ0EsYUFBYUEsR0FBR0EsSUFBSUEsY0FBY0EsQ0FBQ0EsYUFBYUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsQ0FBQ0E7Z0JBQzNFQSxBQUNBQSx5RUFEeUVBO29CQUNyRUEsR0FBR0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0E7Z0JBQUNBLEdBQUdBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBLENBQUNBLGdCQUFnQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBQ3hEQSxJQUFJQSxDQUFDQSxhQUFhQSxDQUFDQSxHQUFHQSxHQUFHQSxHQUFHQSxDQUFDQTtnQkFDN0JBLElBQUlBLENBQUNBLGFBQWFBLENBQUNBLE1BQU1BLEVBQUVBLENBQUNBO1lBQ2hDQSxDQUFDQTtRQUNMQSxDQUFDQTtRQUNMSixrQkFBQ0E7SUFBREEsQ0EvQ0EsQUErQ0NBLElBQUE7SUEvQ1ksbUJBQVcsY0ErQ3ZCLENBQUE7SUFDRDtRQUNJSyxPQUFPQSxDQUFDQSxHQUFHQSxDQUFDQSxtQkFBbUJBLENBQUNBLENBQUNBO1FBQ2pDQSxJQUFJQSxXQUFXQSxHQUFHQSxJQUFJQSxXQUFXQSxFQUFFQSxDQUFDQTtJQUN4Q0EsQ0FBQ0E7SUFIZSxXQUFHLE1BR2xCLENBQUEiLCJmaWxlIjoiTWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBiYiA9IEJhY2tib25lO1xyXG5pbXBvcnQgbW9kZWxzID0gcmVxdWlyZShcIk1vZGVsc1wiKTtcclxuaW1wb3J0IHByb2R1Y3RWaWV3cyA9IHJlcXVpcmUoXCJQcm9kdWN0Vmlld3NcIik7XHJcbmltcG9ydCBsaW5lVmlld3MgPSByZXF1aXJlKFwiTGluZVZpZXdzXCIpO1xyXG5pbXBvcnQgb3BlcmF0aW9uVmlld3MgPSByZXF1aXJlKFwiT3BlcmF0aW9uVmlld3NcIik7XHJcbmltcG9ydCBwcm9kdWN0U3RhdHVzVmlld3MgPSByZXF1aXJlKFwiUHJvamVjdFN0YXR1c1ZpZXdzXCIpO1xyXG5cclxuLy8gbWFpbiBhcHBsaWNhdGlvblxyXG5leHBvcnQgY2xhc3MgQXBwbGljYXRpb24ge1xyXG4gICAgcHJpdmF0ZSBzZWxlY3RlZExpbmVJZDogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBzZWxlY3RlZFByb2R1Y3RJZDogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBwcm9kdWN0U3RhdHVzTGlzdDogcHJvZHVjdFN0YXR1c1ZpZXdzLlByb2R1Y3RTdGF0dXNWaWV3TGlzdDtcclxuICAgIHByaXZhdGUgcHJvZHVjdExpc3Q6IHByb2R1Y3RWaWV3cy5Qcm9kdWN0TGlzdDtcclxuICAgIHByaXZhdGUgbGluZUxpc3Q6IGxpbmVWaWV3cy5MaW5lTGlzdDtcclxuICAgIHByaXZhdGUgb3BlcmF0aW9uTGlzdDogb3BlcmF0aW9uVmlld3MuT3BlcmF0aW9uTGlzdDtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIC8vIHZpZXdzXHJcbiAgICAgICAgdGhpcy5wcm9kdWN0U3RhdHVzTGlzdCA9IG5ldyBwcm9kdWN0U3RhdHVzVmlld3MuUHJvZHVjdFN0YXR1c1ZpZXdMaXN0KCk7XHJcbiAgICAgICAgdGhpcy5wcm9kdWN0U3RhdHVzTGlzdC4kZWwgPSAkKCcjZGl2UHJvZHVjdFN0YXR1cycpO1xyXG4gICAgICAgIHRoaXMucHJvZHVjdExpc3QgPSBuZXcgcHJvZHVjdFZpZXdzLlByb2R1Y3RMaXN0KFwiI2RpdlByb2R1Y3RMaW5lc1wiKTtcclxuICAgICAgICB0aGlzLnByb2R1Y3RMaXN0LiRlbCA9ICQoJyNkaXZQcm9kdWN0cycpO1xyXG4gICAgICAgIHRoaXMubGluZUxpc3QgPSBuZXcgbGluZVZpZXdzLkxpbmVMaXN0KCk7XHJcbiAgICAgICAgdGhpcy5saW5lTGlzdC4kZWwgPSAkKCcjZGl2TGluZXMnKTtcclxuICAgICAgICB0aGlzLnByb2R1Y3RTdGF0dXNMaXN0LnJlbmRlcigpO1xyXG4gICAgICAgIHRoaXMucHJvZHVjdExpc3QucmVuZGVyKCk7XHJcbiAgICAgICAgdGhpcy5saW5lTGlzdC5yZW5kZXIoKTtcclxuICAgICAgICAvLyBtZXNzYWdlc1xyXG4gICAgICAgIG1vZGVscy5NZXNzYWdpbmcoKS5iaW5kKFwic2VsZWN0UHJvZHVjdFwiLCB0aGlzLnNlbGVjdFByb2R1Y3QsIHRoaXMpO1xyXG4gICAgICAgIG1vZGVscy5NZXNzYWdpbmcoKS5iaW5kKFwic2VsZWN0TGluZVwiLCB0aGlzLnNlbGVjdExpbmUsIHRoaXMpO1xyXG4gICAgfVxyXG4gICAgcHVibGljIFJ1bigpIHtcclxuICAgICAgICAvLyBub29wXHJcbiAgICB9XHJcbiAgICAvLyBtZXNzYWdlIGhhbmRsZXJzXHJcbiAgICBwcml2YXRlIHNlbGVjdFByb2R1Y3QocGFyYW06IGFueSkge1xyXG4gICAgICAgIHZhciBwcm9kdWN0SWQgPSBwYXJzZUludChwYXJhbSk7XHJcbiAgICAgICAgaWYgKHByb2R1Y3RJZCA+IDAgJiYgcHJvZHVjdElkICE9IHRoaXMuc2VsZWN0ZWRQcm9kdWN0SWQpIHtcclxuICAgICAgICAgICAgdGhpcy5wcm9kdWN0TGlzdC5TZWxlY3RQcm9kdWN0KHByb2R1Y3RJZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHJpdmF0ZSBzZWxlY3RMaW5lKHBhcmFtOiBhbnkpIHtcclxuICAgICAgICB2YXIgbGluZUlkID0gcGFyc2VJbnQocGFyYW0pO1xyXG4gICAgICAgIGlmIChsaW5lSWQgPiAwICYmIGxpbmVJZCAhPSB0aGlzLnNlbGVjdGVkTGluZUlkKSB7XHJcbiAgICAgICAgICAgIC8vIGhhdmUgdG8gcmVtb3ZlIG9sZCB2aWV3IHNvIGV2ZW50cyB3b24ndCBiZSBjYWxsZWQgZnJvbSBpdCBhbHNvXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wZXJhdGlvbkxpc3QgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vcGVyYXRpb25MaXN0LnJlbW92ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRMaW5lSWQgPSBsaW5lSWQ7XHJcbiAgICAgICAgICAgIHRoaXMub3BlcmF0aW9uTGlzdCA9IG5ldyBvcGVyYXRpb25WaWV3cy5PcGVyYXRpb25MaXN0KHRoaXMuc2VsZWN0ZWRMaW5lSWQpO1xyXG4gICAgICAgICAgICAvLyBjcmVhdGluZyBkaXYsIGFzIHJlbW92ZSB3aWxsIHJlbW92ZSB0aGUgZWxlbWVudCBmcm9tIGRvbSB3aGVyZSB2aWV3IGlzXHJcbiAgICAgICAgICAgIHZhciBkaXYgPSAkKCc8ZGl2PicpOyBkaXYuYXBwZW5kVG8oJCgnI2Rpdk9wZXJhdGlvbnMnKSk7XHJcbiAgICAgICAgICAgIHRoaXMub3BlcmF0aW9uTGlzdC4kZWwgPSBkaXY7XHJcbiAgICAgICAgICAgIHRoaXMub3BlcmF0aW9uTGlzdC5yZW5kZXIoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIFJ1bigpIHtcclxuICAgIGNvbnNvbGUubG9nKFwiQXBwbGljYXRpb24gc3RhcnRcIik7XHJcbiAgICB2YXIgYXBwbGljYXRpb24gPSBuZXcgQXBwbGljYXRpb24oKTtcclxufVxyXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=